(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{398:function(s,n,a){"use strict";a.r(n);var e=a(54),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"elk-elastic-stack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#elk-elastic-stack"}},[s._v("#")]),s._v(" ELK （Elastic stack）")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ELK是Elasticsearch、Logstash、Kibana三大开源框架首字母大写简称\n(但是后期出现的filebeat(beats中的一种)可以用来替代logstash的数据收集功能，比较轻量级)。市面上也被成为Elastic Stack。\n- Elasticsearch: 分布式搜索和分析引擎，用于全文检索结构化检索及分析，基于Lucene开发 （源于创始人为妻子做一个菜谱功能）\n- Logstash:实时数据传输管道，负责将数据从管道输入端传入管道的输出端，并且对这些数据可以进行筛选，清洗的操作\n- Kibana:可视化操作平台，是用于Elasticsearch的使用，搜索查看索引的数据，地图、图表，kibana能够很轻易的展示高级数据分析与可视化\n- Filebeat: 用于转发和集中收集数据的轻量级传送器，作为代理安装在服务器上，filebeat作为监控指定日志文件，收集日志事件，并且将其转发到Elasticsearch或Logstash进行索引\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("ul",[a("li",[s._v("为什么要使用elk （ Elastic stack ）")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1. 分布式系统下不同模块部署在不同的服务器上，出现问题时需要及时根据日志定位到具体的服务，所以需要构建一套集中式的日志系统，可以提高定位问题效率\n2. 相比于传统的 grep、tail、awk工具，无法对日志实现更高要求的查询、排序、统计等\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("有啥子用")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1. 问题定位排查 ： \n2. 监控和预警：日志的监控预警是相辅相成的，基于日志的监控，预警使得运维有自己的机械战队，大大节省人力运维 \n3. 数据分析\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"elasticsearch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch"}},[s._v("#")]),s._v(" Elasticsearch :")]),s._v(" "),a("h4",{attrs:{id:"定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[s._v("#")]),s._v(" 定义：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("· 分布式的 Restful 风格的搜索和数据分析引擎\n")])])]),a("h4",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[s._v("#")]),s._v(" 特点：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("查询：允许执行和合并多种类型的搜索 — 结构化、非结构化、地理位置、度量指标 — 搜索方式随心而变。\n分析：Elasticsearch 聚合让您能够从大处着眼，探索数据的趋势和模式。\n速度：很快，可以做到亿万级的数据，毫秒级返回。\n可扩展性：可以在笔记本电脑上运行，也可以在承载了 PB 级数据的成百上千台服务器上运行。\n弹性：运行在一个分布式的环境中，从设计之初就考虑到了这一点。\n灵活性：具备多个案例场景。支持数字、文本、地理位置、结构化、非结构化，所有的数据类型都欢迎。\n")])])]),a("h4",{attrs:{id:"健康检测-localhost-9200-cluster-health-返回"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#健康检测-localhost-9200-cluster-health-返回"}},[s._v("#")]),s._v(" 健康检测： localhost:9200/_cluster/health，返回：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n  "cluster_name": "docker-cluster",\n  "status": "yellow",\n  "timed_out": false,\n  "number_of_nodes": 1,\n  "number_of_data_nodes": 1,\n  "active_primary_shards": 11,\n  "active_shards": 11,\n  "relocating_shards": 0,\n  "initializing_shards": 0,\n  "unassigned_shards": 4,\n  "delayed_unassigned_shards": 0,\n  "number_of_pending_tasks": 0,\n  "number_of_in_flight_fetch": 0,\n  "task_max_waiting_in_queue_millis": 0,\n  "active_shards_percent_as_number": 73.33333333333333\n}     \n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h4",{attrs:{id:"安装ik分词器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装ik分词器"}},[s._v("#")]),s._v(" 安装IK分词器：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("  1. docker exec -it 容器id /bin/bash\n  2. ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.13.2/elasticsearch-analysis-ik-7.13.2.z\n  3. docker restart 容器id\n")])])]),a("h4",{attrs:{id:"集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群"}},[s._v("#")]),s._v(" 集群：")]),s._v(" "),a("p",[s._v("-集群：\n1. 一个运行中的 Elasticsearch 实例称为一个节点，而集群是由一个或者多个拥有相同 cluster.name 配置的节点组成，\n它们共同承担数据和负载的压力。当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。\n2. 主节点负责管理集群范围内增加、删除索引等操作！ 任何节点都可以选举为主节点，当只有一个es实例的时候")]),s._v(" "),a("ul",[a("li",[s._v("集群健康：")])]),s._v(" "),a("ol",[a("li",[s._v("GET /_cluster/health\n返回json信息：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n    "cluster_name": "docker-cluster",\n    "status": "yellow",\n    "timed_out": false,\n    "number_of_nodes": 1,\n    "number_of_data_nodes": 1,\n    "active_primary_shards": 25,\n    "active_shards": 25,\n    "relocating_shards": 0,\n    "initializing_shards": 0,\n    "unassigned_shards": 18,\n    "delayed_unassigned_shards": 0,\n    "number_of_pending_tasks": 0,\n    "number_of_in_flight_fetch": 0,\n    "task_max_waiting_in_queue_millis": 0,\n    "active_shards_percent_as_number": 58.139534883720934\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("其中状态值status：\ngreen 所有的主分片和副本分片都正常运行。\nyellow 所有的主分片都正常运行，但不是所有的副本分片都正常运行。\nred 有主分片没能正常运行。")]),s._v(" "),a("h4",{attrs:{id:"索引-类型-文档-分片-副本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引-类型-文档-分片-副本"}},[s._v("#")]),s._v(" 索引，类型，文档，分片，副本：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v('1 索引： = mysql数据库\n   倒排索引： =mysql的索引，提升检索的速度\n2 类型： = mysql表\n3 文档： = mysql中的记录\n4 分片： 把数据分成多个在不同节点上\n        a 一个分片是一个Lucene实例\n        b Elasticsearch 是利用分片将数据分发到集群内各处的，分片是数据的容器，文档保存在分片内，分片又被分配到集群内的各个节点里。\n        c 主分片 和 副分片，通过接口查询es的健康状态，其中的 "unassigned_shards"代表副分片未分配的数量（在同一个节点上既保存原始数据又保存副本是没有意义的）\n5 副本： 索引的备份机制\n\n\n\n倒排索引：\n    例如，假设我们有两个文档，每个文档的 content 域包含如下内容：\n        The quick brown fox jumped over the lazy dog\n        Quick brown foxes leap over lazy dogs in summer\n    为了创建倒排索引，我们首先将每个文档的 content 域拆分成单独的 词（我们称它为 词条 或 tokens ），\n    创建一个包含所有不重复词条的排序列表，然后列出每个词条出现在哪个文档。结果如下所示：\n        Term      Doc_1  Doc_25\n        -------------------------\n        Quick   |       |  X\n        The     |   X   |\n        brown   |   X   |  X\n        dog     |   X   |\n        dogs    |       |  X\n        fox     |   X   |\n        foxes   |       |  X\n        in      |       |  X\n        jumped  |   X   |\n        lazy    |   X   |  X\n        leap    |       |  X\n        over    |   X   |  X\n        quick   |   X   |\n        summer  |       |  X\n        the     |   X   |\n        ------------------------\n\n    现在，如果我们想搜索 quick brown ，我们只需要查找包含每个词条的文档：\n        \n        Term      Doc_1  Doc_2\n        -------------------------\n        brown   |   X   |  X\n        quick   |   X   |\n        ------------------------\n        Total   |   2   |  1\n    两个文档都匹配，但是第一个文档比第二个匹配度更高。如果我们使用仅计算匹配词条数量的简单 相似性算法 ，那么，我们可以说，对于我们查询的相关性来讲，第一个文档比第二个文档更佳。\n\n\n\n\n\n文档的如何存储的：\n    \n    1. 当索引一个文档的时候，文档会存到主分片中。ES如何知道这个文档是在哪个分片里，依据的公式：\n        分片  = hash(默认文档的id) % 主分片的数量\n        shard = hash(routing) % number_of_primary_shards\n            \n            - routing 是一个可变值，默认是文档的 _id ，也可以设置成一个自定义的值。\n            - routing 通过 hash 函数生成一个数字，然后这个数字再除以 number_of_primary_shards （主分片的数量）后得到 余数 。\n            - 这个分布在 0到 number_of_primary_shards-1 之间的余数，就是我们所寻求的文档所在分片的位置。\n            这就解释了为什么我们要在创建索引的时候就确定好主分片的数量 并且永远不会改变这个数量：因为如果数量变化了，那么所有之前路由的值都会无效，文档也再也找不到了。\n        \n\n\n文档的操作：\n\n    1.新增一个文档\n        PUT poem/test/1\n        {\n            "id": "1",\n            "userRemark": "索引中的version字段-相同的id就是update文档",\n            "content": "是乐观锁，保证数据并发情况下的准确性-相同的id就是update文档"\n        }\n        解析： 1是文档的id，若id=1该文档不在索引内，则是新建，返回如下result=created，并且有个一version字段，\n              在Elasticsearch中每个文档都有一个版本号。当每次对文档进行修改时（包括删除），_version 的值会递增。在处理冲突中，\n              我们讨论了怎样使用 _version号码确保你的应用程序中的一部分修改不会覆盖另一部分所做的修改。\n\n        {\n            "_index" : "poem",\n            "_type" : "test",\n            "_id" : "6",\n            "_version" : 1,\n            "result" : "created",\n            "_shards" : {\n            "total" : 2,\n            "successful" : 1,\n            "failed" : 0\n            },\n            "_seq_no" : 1,\n            "_primary_term" : 1\n        }\n\n    2.查询指定id的文档\n      GET poem/test/1?pretty\n      返回：\n            {\n                "_index" : "poem",\n                "_type" : "test",\n                "_id" : "1",\n                "_version" : 1,\n                "_seq_no" : 0,\n                "_primary_term" : 1,\n                "found" : true,\n                "_source" : {\n                "id" : "demoData",\n                "userRemark" : "demoData",\n                "content" : "demoData"\n                }\n            }\n        \n      #查询指定id的文档并且返回指定部分\n      GET poem/test/1/_source\n      返回：\n            {\n                "id" : "demoData",\n                "userRemark" : "demoData",\n                "content" : "demoData"\n            }\n')])])]),a("h2",{attrs:{id:"logstash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logstash"}},[s._v("#")]),s._v(" logstash")]),s._v(" "),a("h4",{attrs:{id:"同行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同行"}},[s._v("#")]),s._v(" 同行")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("filebeat ： \n        1. golang，轻量，消耗内存资源较小，\n        2. 分布式服务可以考虑日志传送使用filebeat传送到logstash再转发Redis、mq，或者直接到Es\nlogtash：\n        1. filter功能，过滤筛选日志格式\n")])])]),a("h4",{attrs:{id:"定义-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义-2"}},[s._v("#")]),s._v(" 定义")]),s._v(" "),a("ul",[a("li",[s._v("Logstash 主要用于收集服务器日志，它是一个开源数据收集引擎，具有实时管道(pipeline)功能。Logstash 可以动态地将来自不同数据源的数据统一起来，并将数据标准化到您所选择的目的地。")])]),s._v(" "),a("h4",{attrs:{id:"结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构"}},[s._v("#")]),s._v(" 结构")]),s._v(" "),a("ul",[a("li",[s._v("输入： 数据（包含但不限于日志）往往都是以不同的形式、格式存储在不同的系统中，而 Logstash 支持从多种数据源中收集数据（File、Syslog、MySQL、消息中间件等等）。")]),s._v(" "),a("li",[s._v("过滤器： 实时解析和转换数据，识别已命名的字段以构建结构，并将它们转换成通用格式。")]),s._v(" "),a("li",[s._v("输出：Elasticsearch 并非存储的唯一选择，Logstash 提供很多输出选择。")])]),s._v(" "),a("h4",{attrs:{id:"常用数据涞源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用数据涞源"}},[s._v("#")]),s._v(" 常用数据涞源：")]),s._v(" "),a("ul",[a("li",[s._v("file ： 从一个文件读取（*.log）")]),s._v(" "),a("li",[s._v("tcp :")])]),s._v(" "),a("h4",{attrs:{id:"数据源案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据源案例"}},[s._v("#")]),s._v(" 数据源案例：")]),s._v(" "),a("ul",[a("li",[s._v("file：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('input\n    file {\n        # 日志文件地址\n        path => ["/var/log/*.log", "/var/log/message"]\n        # 默认一小时\n        close_older => 3600\n        # 设置新行分隔符，默认为“ \\ n”。\n        delimiter => "\\n"\n        # 此参数配合stat_interval，此值用来发现新文件，最终频率为discover_interval × stat_interval。默认15\n        discover_interval =>\n        # 默认为1秒\n        stat_interval => "1 second"\n        # 忽略压缩包\n        exclude => exclude => "*.gz"\n        # 默认为false\n        exit_after_read => false\n        # 默认为4611686018427387903，是为了保证在读取下一个文件前保证当前文件已经读取完毕\n        file_chunk_count => 4611686018427387903\n        # 默认为32kb\n        file_chunk_size => 32768\n        # 默认值为delete，可选值：delete，log，log_and_delete\n        file_completed_action => delete\n        # 将完全读取的文件路径附加到哪个文件，此内容没有默认值\n        file_completed_log_path => "/usr/local/log2/completed.log"\n        # 默认值last_modified，可设置内容：last_modified, path\n        file_sort_by => last_modified\n        # 默认值asc，可设置的值asc, desc\n        file_sort_direction =>\n        # 设置了忽略1000秒之前修改的文件，此内容没有默认值\n        ignore_older => 1000\n        # 设置最多打开文件量，此值没有默认值，但是存在一个内部限制4095\n        max_open_files => 4095\n        # 设置了输入模式为tail\n        # tail模式下，start_position 和close_older参数将被忽略。start_position始终从头开始读取文件，close_older到达EOF时文件自动关闭\n        # read模式下需要设置ignore_older 、file_completed_action 、file_completed_log_path 参数\n        mode => tail\n        # 默认值2周\n        sincedb_clean_after => "2 weeks"\n        # 此为默认值，此值为文件路径而不是目录路径\n        sincedb_path => path.data>/plugins/inputs/file\n        # 默认值15秒\n        sincedb_write_interval => "15 seconds"\n        # 默认值"end"，可选值beginning，end。如果启动logstash的时候需要读取旧数据需要设置为beginning\n        start_position => "end"\n        # 下面是公共配置\n        # 设置了type为system\n        type => "system"\n        # 默认line\n        codec => "json"\n        # 默认值为true\n        enable_metric => false\n        # 指定此数据输入id为input1\n        id => input1\n        # 添加了键位key值为value的数据到时间\n        add_field => {\n        "key" => "value"\n        }\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br")])]),a("ul",[a("li",[s._v("tcp:")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('input {\n  tcp {\n      # 主机地址\n      host => "192.168.0.2"\n      # 此时需要监听客户端\n      mode => "server"\n      # 要监听的端口\n      port => 8081\n      # 默认值为false\n      tcp_keep_alive => false\n      # 默认值为true\n      dns_reverse_lookup_enabled => true\n      # 下面是公共配置\n      # 设置了type为system\n      type => "system"\n      # 默认line\n      codec => "json"\n      # 默认值为true\n      enable_metric => false\n      # 指定此数据输入id为input1\n      id => input1\n      # 添加了键位key值为value的数据到时间\n      add_field => {\n      "key" => "value"\n      }\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("ul",[a("li",[s._v("rabbitMq:")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('  input {\n    rabbitmq {\n      # 队列的主机\n      host => "192.168.1.2"\n      # 默认为guest\n      password => "guest"\n      # 消息服务器端口，默认为5672\n      port => 5672\n      # 默认为""\n      queue => ""\n      # 默认值为true\n      ack => true\n      # 默认值为{}\n      arguments => { "x-ha-policy" => "all" }\n      # 默认值为false\n      auto_delete => false\n      # 默认值为true\n      automatic_recovery => true\n      # 默认值为1秒\n      connect_retry_interval => 1\n      # 没有默认值，超时时间为无限\n      connection_timeout => 1000\n      # 默认值为false\n      durable => false\n      # 队列的交换器信息\n      exchange => "log.exchange"\n      # 队列的交换器信息\n      exchange_type => "direct"\n      # 默认值为false\n      exclusive => false\n      # 没有默认值，但是不指定的时候未60秒，秒为单位\n      heartbeat => 60\n      # 默认值为logstash，路由键\n      key => logstash\n      # 默认值为false，启动此功能保存元数据会影响性能\n      metadata_enabled => false\n      # 默认值为false，当设置true的时候表明为被动队列，则在消息服务器上，此队列已经存在\n      passive => false\n      # 默认为256\n      prefetch_count => 256\n      # 下面是公共配置\n      # 设置了type为system\n      type => "system" \n      # 默认line\n      codec => "json"\n      # 默认值为true\n      enable_metric => false\n      # 指定此数据输入id为input1\n      id => input1\n      # 添加了键位key值为value的数据到时间\n      add_field => {\n        "key" => "value"\n      }\n    }\n  }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br")])]),a("ul",[a("li",[s._v("redis:")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('input {\n  redis {\n  # 默认值为 125\n  batch_count => 125\n  # 没有默认值，但其可选内容list，channel，pattern_channel\n  data_type => list\n  # 默认值为 0\n  db => 0\n  # 默认值为 "127.0.0.1"\n  host => "127.0.0.1"\n  # 指定channel，没有默认值\n  key => "channel"\n  # redis的用户密码\n  password => "password"\n  # redis服务器端口，默认值为 6379\n  port => 6379\n  # 默认不开启SSL\n  ssl => false\n  # 初始超时为1秒\n  timeout => 1\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("h2",{attrs:{id:"kibana"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kibana"}},[s._v("#")]),s._v(" Kibana")]),s._v(" "),a("p",[s._v("Elasticsearch可视化web数据仪表台，数据分析面板")]),s._v(" "),a("h2",{attrs:{id:"filebeat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filebeat"}},[s._v("#")]),s._v(" Filebeat")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("用于转发和集中收集数据的轻量级传送器，作为代理安装在服务器上，filebeat作为监控指定日志文件，收集日志事件，并且将其转发到Elasticsearch或Logstash进行索引")])]),s._v(" "),a("li",[a("p",[s._v("工作原理\n当您启动 Filebeat 时，它会启动一个或多个输入，这些输入会在您为日志数据指定的位置中查找。对于 Filebeat 定位的每个日志，Filebeat 都会启动一个收割机。\n每个harvester 读取单个日志以获取新内容并将新日志数据发送到libbeat，libbeat 聚合事件并将聚合数据发送到您为Filebeat 配置的输出。\n"),a("a",{attrs:{"data-fancybox":"",title:"111",href:"filebeat工作原理.png"}},[a("img",{attrs:{src:"filebeat%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png",alt:"img.png"}})])])])]),s._v(" "),a("h2",{attrs:{id:"分布式系统elk的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式系统elk的使用"}},[s._v("#")]),s._v(" 分布式系统ELK的使用")]),s._v(" "),a("p",[s._v("（filebeat收集推并送日志给logstash）")]),s._v(" "),a("ul",[a("li",[s._v("总结：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  之前是应用直接在logback-dev.yml的配置中指定logstash地址，直接走tcp推送日志到logstash，然后适当筛选转送到es中生成索引和文档。\n  但是随着系统的分化为分布式系统后，各个应用均要使用到内存等资源，并且logstash是java应用（JVM）非常消耗内存和CPU资源，filebeat是golang开发的，轻便并且消耗较小资源\n  所以logstash安装在应用部署的机器上显得非常的笨重。最常见的做法是用filebeat部署在应用的机器上，logstash单独部署，然后由\n  filebeat将应用日志收集给logstash解析，解析完由logstash再传给elasticsearch。   \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ul",[a("li",[a("p",[s._v("流程：\n"),a("a",{attrs:{"data-fancybox":"",title:"111",href:"分布式系统中ELK流程4.png"}},[a("img",{attrs:{src:"%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%ADELK%E6%B5%81%E7%A8%8B4.png",alt:"img.png"}})])])]),s._v(" "),a("li",[a("p",[s._v("配置：")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  1. 配置docker文件： ./filebeat/docker-filebeat.yml\n      注意挂载日志文件到容器内！\n\n  2. 配置filebeat配置文件： ./filebeat/conf/filebeat.yml\n      这里有logstash推送地址，以及需要推送的日志文件 （也可以直接推送到ES）\n\n  3. 配置logstash接收 ： ./logstash/pipeline/logstash.conf\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);