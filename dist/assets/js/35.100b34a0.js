(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{425:function(s,n,e){"use strict";e.r(n);var a=e(54),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"websocket"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[s._v("#")]),s._v(" webSocket")]),s._v(" "),e("ul",[e("li",[s._v("基于 webSocket 实现在线聊天")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("定义： 基于tcp协议之上的一种新的网络协议，实现浏览器和服务器双全工（full-duplex）通信，允许服务器主动发响应信息给浏览器\n      http是一个request对应一个response，基于请求驱动的模型，只有在浏览器发起请求后，服务端才能响应给浏览器，否则无法主动响应\n      http是短连接，请求结束之后会关闭连接，下次请求需要重新走四次握手三次挥手的过程\n      websocket: 是长连接，连接成功打开后，状态一直是保持打开。\n      webSocket和http都是基于tcp协议上应用层！\n      \n      双全工： 同时进行通信的双向传输：\n      半双工： 同一时刻只能有一方传输数据，比如对讲机\n      单工：   直接接收一方的数据，比如电视机和人，人只能接收到电视机的信息\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("h2",{attrs:{id:"客户端-websocket-readystate-状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#客户端-websocket-readystate-状态"}},[s._v("#")]),s._v(" 客户端： webSocket.readyState 状态：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("CONNECTING: 值为0，表示websocket正在连接\nOPEN: 值为1，表示websocket已经打开\nCLOSING: 值为2，表示websocket正在关闭\nCLOSED: 值为3，表示websocket已经关闭\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h2",{attrs:{id:"客户端-websocket-的几个方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#客户端-websocket-的几个方法"}},[s._v("#")]),s._v(" 客户端： webSocket 的几个方法")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('WebSocket.onopen: ws连接服务器成功时，触发的回调事件 \n\n  WebSocket.onopen = funciont(){\n        WebSocket.send("hello websocket !! " );\n  }          \n   \nWebSocket.onmessage: ws收到服务器的发来的消息时候，触发的回调事件\n\nWebSocket.onclose: ws关闭连接的时候，触发回调的事件\n\nWebSocket.onerror: ws发生异常，触发的回调事件\n\nWebSocket.send : ws客户端向服务器发送消息\n\n属性： WebSocket.bufferedAmount 返回值为number，表示还剩下多少二进制的的数据没有发出去，用于判断是否发送结束\n\n\n    if (socket.bufferedAmount === 0) {\n      // 发送完毕\n    } else {\n      // 发送还没结束\n    }\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br")])]),e("h2",{attrs:{id:"springboot-集成-websocket"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springboot-集成-websocket"}},[s._v("#")]),s._v(" springboot 集成 webSocket")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('1. 因为WebSocket是类似客户端服务端的形式(采用ws协议)，那么这里的WebSocketServer其实就相当于一个ws协议的Controller\n2. 直接@ServerEndpoint("/imserver/{userId}") 、@Component启用即可，然后在里面实现@OnOpen开启连接，@onClose关闭连接，@onMessage接收消息等方法。\n3. 新建一个ConcurrentHashMap webSocketMap 用于接收当前userId的WebSocket，方便IM之间对userId进行推送消息。单机版实现到这里就可以。\n4. 集群版（多个ws节点）还需要借助mysql或者redis等进行处理，改造对应的sendMessage方法即可。\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h2",{attrs:{id:"websocket心跳重连机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#websocket心跳重连机制"}},[s._v("#")]),s._v(" websocket心跳重连机制")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('起因： \n    在使用websocket过程中，可能会出现网络断开的情况，比如信号不好，或者网络临时性关闭，这时候websocket的连接已经断开， \n    而浏览器不会执行websocket 的 onclose方法，我们无法知道是否断开连接，也就无法进行重连操作。 如果当前发送websocket数据到后端，\n    一旦请求超时，onclose便会执行，这时候便可进行绑定好的重连操作。 因此websocket心跳重连就应运而生。\n    \n实现过程： \n    1. ws实例话的时候触发的几个方法： \n        var ws = new WebSocket(url);\n        ws.onclose = function () {\n            //something\n        };\n        ws.onerror = function () {\n            //something\n        };\n                \n        ws.onopen = function () {\n           //something\n        };\n        ws.onmessage = function (event) {\n           //something\n        }\n    2. 若需要websocket连接一直保持，我们会在close或者error上绑定重新连接方法。\n        ws.onclose = function () {\n            reconnect();\n        };\n        ws.onerror = function () {\n            reconnect();\n        };\n        \n    3. 心跳重连：\n        var heartCheck = {\n            timeout: 60000,//60ms\n            timeoutObj: null,\n            reset: function(){\n                clearTimeout(this.timeoutObj);\n        　　　　 this.start();\n            },\n            start: function(){\n                this.timeoutObj = setTimeout(function(){\n                    ws.send("HeartBeat");\n                }, this.timeout)\n            }\n        }\n        \n        ws.onopen = function () {\n            heartCheck.start();\n        };\n        ws.onmessage = function (event) {\n            heartCheck.reset();\n        }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);