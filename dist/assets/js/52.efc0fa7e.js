(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{442:function(s,e,n){"use strict";n.r(e);var a=n(54),t=Object(a.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"redisson"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redisson"}},[s._v("#")]),s._v(" Redisson")]),s._v(" "),n("p",[s._v("Redisson是具有内存数据网格功能的 Redis Java客户端。它提供了更简单更方便的方式来使用Redis。\n它不仅提供了一系列的 redis 常用数据结构命令服务，还提供了许多分布式服务，例如\n分布式锁、\n布隆过滤器（bloom filter）、\n分布式对象、\n分布式集合、\n分布式远程服务、\n分布式调度任务服务等")]),s._v(" "),n("h2",{attrs:{id:"redisson-实现分布式锁的原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redisson-实现分布式锁的原理"}},[s._v("#")]),s._v(" Redisson 实现分布式锁的原理")]),s._v(" "),n("p",[s._v("Redisson在操作redis的时候，都是使用lua脚本执行的，这样保证了操作的原子性。")]),s._v(" "),n("p",[s._v('1、加锁机制\n线程去获取锁，获取成功: 执行lua脚本，保存数据到redis数据库。\n线程去获取锁，获取失败: 一直通过while循环尝试获取锁，获取成功后，执行lua脚本，保存数据到redis数据库。\n2、watch dog自动延期机制 ： 看门狗其实就是个定时任务，在每隔1/3默认时间时也就是10s执行一次，\n在一个分布式环境下，假如一个线程获得锁后，突然服务器宕机了，那么这个时候在一定时间后这个锁会自动释放，你也可以设置锁的有效时间(不设置默认30秒），这样的目的主要是防止死锁的发生。\n但在实际开发中会有下面一种情况:\n设置锁1秒过去\nredissonLock.lock("redisson", 1);\n业务逻辑需要咨询2秒\nredissonLock.release("redisson");\n线程1 进来获得锁后，线程一切正常并没有宕机，但它的业务逻辑需要执行2秒，这就会有个问题，在 线程1 执行1秒后，这个锁就自动过期了，\n那么这个时候 线程2 进来了。那么就存在 线程1和线程2 同时在这段业务逻辑里执行代码，这当然是不合理的。\n而且如果是这种情况，那么在解锁时系统会抛异常，因为解锁和加锁已经不是同一线程了，具体后面代码演示。\n所以这个时候 看门狗 就出现了，它的作用就是 线程1 业务还没有执行完，时间就过了，线程1 还想持有锁的话，就会启动一个watch\ndog后台线程，不断的延长锁key的生存时间。\n注意 正常这个看门狗线程是不启动的，还有就是这个看门狗启动后对整体性能也会有一定影响，所以不建议开启看门狗。')]),s._v(" "),n("h2",{attrs:{id:"redis分布式锁会有个缺陷-就是在redis哨兵模式下"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis分布式锁会有个缺陷-就是在redis哨兵模式下"}},[s._v("#")]),s._v(" Redis分布式锁会有个缺陷，就是在Redis哨兵模式下:")]),s._v(" "),n("p",[s._v("客户端1 对某个 master节点 写入了redisson锁，此时会异步复制给对应的 slave节点。但是这个过程中一旦发生\nmaster节点宕机，主备切换，slave节点从变为了 master节点。\n这时 客户端2 来尝试加锁的时候，在新的master节点上也能加锁，此时就会导致多个客户端对同一个分布式锁完成了加锁。\n这时系统在业务语义上一定会出现问题， 导致各种脏数据的产生 。\n缺陷 在哨兵模式或者主从模式下，如果 master实例宕机的时候，可能导致多个客户端同时完成加锁。")]),s._v(" "),n("h2",{attrs:{id:"redisson操作redis"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redisson操作redis"}},[s._v("#")]),s._v(" Redisson操作Redis")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('@Test\npublic void test(){\n    // 字符串\n    RBucket<Object> bucket = redisson.getBucket("r-str");\n    //bucket.set("redissonValue");\n    bucket.set("aaaa",60,TimeUnit.SECONDS);\n\n    // 对象\n    RBucket<Object> rObj = redisson.getBucket("r-obj");\n    User user = new User().setName("张三").setSex("男").setAge("{年龄:20}");\n    rObj.set(user);\n    rObj.expire(60,TimeUnit.SECONDS);\n\n    // list\n    RList<Object> rList = redisson.getList("r-list");\n    List<String> setList = new ArrayList<String>(){{\n        add("list1");add("list2");add("list3");add("list4");\n    }};\n    rList.addAll(setList);\n    rList.expire(60,TimeUnit.SECONDS);\n\n    // set\n    RSet<Object> rSet = redisson.getSet("r-set");\n    Set<String> setS = new HashSet<String>(){{add("set1");add("set2");add("set3");}};\n    rSet.addAll(setS);\n    rSet.expire(60,TimeUnit.SECONDS); //设置过期时间\n\n    // sorted set 有序set\n    RSortedSet<Object> rSSet = redisson.getSortedSet("r-sset");\n    SortedSet<String> sortedSet = new TreeSet<String>(){{add("有序set1");add("有序set2");add("有序set3");}};\n    rSSet.addAll(sortedSet);\n\n\n    // map 操作\n    RMap<Object, Object> rMap = redisson.getMap("r-map");\n    Map<String,Object> map = new HashMap<String,Object>(){{put("name","qz");put("about","浙江杭州");}};\n    rMap.putAll(map);\n    rMap.expire(60,TimeUnit.SECONDS);// 设置过期时间\n\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br")])]),n("h2",{attrs:{id:"redisson分布式锁具体使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redisson分布式锁具体使用"}},[s._v("#")]),s._v(" Redisson分布式锁具体使用")]),s._v(" "),n("p",[s._v("具体参考项目: "),n("a",{attrs:{href:"https://gitee.com/DemoMeng/better-skills",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://gitee.com/DemoMeng/better-skills"),n("OutboundLink")],1),s._v(" 的a-lock模块")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public String test(String key){\n    RLock lock = redisson.getLock(key);\n    try {\n        // 尝试加锁，最多等待3秒，上锁以后10秒自动解锁\n        boolean res = lock.tryLock(3, 10, TimeUnit.SECONDS);\n        if(res){\n            // 成功\n            // do your business\n            log.info("加锁成功");\n            amount = amount - 1;\n        }else{\n            log.error("前方拥挤，请重试！！");\n            return "前方拥挤，请重试！！";\n        }\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    } finally {\n        log.info("lock.isLocked的状态={},lock.isHeldByCurrentThread={}",lock.isLocked(),lock.isHeldByCurrentThread());\n        if(lock.isLocked()){ // 是否还是锁定状态\n            if(lock.isHeldByCurrentThread()){ // 是否是当前执行线程的锁\n                lock.unlock(); // 释放锁\n            }\n        }\n    }\n    return "加锁成功";\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("h2",{attrs:{id:"redisson分布式锁的-lock-和-trylock-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redisson分布式锁的-lock-和-trylock-的区别"}},[s._v("#")]),s._v(" Redisson分布式锁的 lock 和 tryLock 的区别")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("返回值不同：\nlock没有返回值\ntryLock返回值为boolean，true是加锁成功，false是加锁失败")])]),s._v(" "),n("li",[n("p",[s._v("机制不同：\nlock加锁会一直等待\ntryLock是会尝试加锁，指定时间内去加锁，若超过该时间还未加锁成功，就直接返回false加锁失败")])])]),s._v(" "),n("h2",{attrs:{id:"redisson分布式锁在释放锁的时候需要注意"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redisson分布式锁在释放锁的时候需要注意"}},[s._v("#")]),s._v(" Redisson分布式锁在释放锁的时候需要注意")]),s._v(" "),n("p",[s._v("释放锁调用： lock.unlock()方法，但是在释放锁的时候需要注意：需要判断当前锁的状态：\nlock.isLocked(); // 返回值为boolean，true=已上锁，false=未上锁\nlock.isHeldByCurrentThread(); // 是否为当前线程上的锁")]),s._v(" "),n("p",[s._v("释放锁的代码：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('log.info("lock.isLocked的状态={},lock.isHeldByCurrentThread={}",lock.isLocked(),lock.isHeldByCurrentThread());\nif(lock.isLocked()){ // 是否还是锁定状态\n    if(lock.isHeldByCurrentThread()){ // 是否是当前执行线程的锁\n        lock.unlock(); // 释放锁\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("只有当上面的两个方法均为true的时候，调用lock.unlock()才能，否则会报错")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("java.lang.IllegalMonitorStateException: attempt to unlock lock, not locked by current thread by node id: 48401ed0-f99a-41e1-9b19-3e7bda7353c9 thread-id: 59\n       at org.redisson.RedissonLock.unlock(RedissonLock.java:368)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("        sh nacos/nacos-config.sh -h 182.42.139.217 -p 8848 -g DEFAULT_GROUP -t e0a30387-9019-4004-b491-d8045c67c350 -u nacos -w nacos\n")])])])])}),[],!1,null,null,null);e.default=t.exports}}]);