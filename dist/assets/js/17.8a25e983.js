(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{405:function(n,s,a){"use strict";a.r(s);var e=a(54),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"springboot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springboot"}},[n._v("#")]),n._v(" springboot")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("#### 简介\n    springboot是基于spring+java+web容器，微服务框架的杰出代表。微服务其实就是将服务粒度做小，使之可以独立承担对外服务的的职责。\n\n##### 特征\n    * 遵循“约定胜于配置”的原则，使用spring boot只需要很少的配置，大部分时候可以使用默认配置 （spring组件代码是轻量级的，但是xml配置确实重量级的）\n    * 开箱即用、项目快速搭建，可以配置整合第三方框架\n    * 可完全不使用xml配置，借助java config\n    * 内嵌Servlet（如 Tomcat）容器，可以jar包运行\n    * 运行中的应用状态监控、安全、指标、健康检测\n\n##### 核心功能\n    * 起步依赖： spring-boot-starter-web\n    * 自动配置： 约定胜于配置，springboot默认配置\n    \n#####  微服务优势\n\n    *\t独立性。每个微服务都是一个独立的项目。可以独立对外提供服务，可以将研发人力资源很好的分摊，避免人力资源密集带来的沟通、协作成本。（低耦合原则）\n    *\t稳定性。任何一个微服务的失败都将只影响自己或少量其他微服务，不会影响整个服务运行体系。\n\n\n1.定时任务器、调度 ：  Quartz\n2.AOP、IOC\n3.事务的传播性\n    A方法里面调用了B方法导致事务不生效，可以使用当前类调用B方法，并且当前的类需要注册到springBean管理容器中，原因事务是由spring容器管理的。\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br")])]),a("h2",{attrs:{id:"spring-boot执行流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot执行流程"}},[n._v("#")]),n._v(" Spring boot执行流程")]),n._v(" "),a("ul",[a("li",[a("ol",[a("li",[n._v("springboot 源码")])])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('public ConfigurableApplicationContext run(String... args) {\n        // 创建 StopWatch 用于统计程序启动耗时\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n        // 创建配置上下文对象\n        ConfigurableApplicationContext context = null;\n        Collection<SpringBootExceptionReporter> exceptionReporters = new ArrayList<>();\n        configureHeadlessProperty();\n        // 开启一个监听器\n        SpringApplicationRunListeners listeners = getRunListeners(args);\n        listeners.starting();\n        try {\n        \n            // 创建默认配置项\n            ApplicationArguments applicationArguments = new DefaultApplicationArguments(\n                    args);\n            // 将默认配置项放到全局配置变量中        \n            ConfigurableEnvironment environment = prepareEnvironment(listeners,\n                    applicationArguments);\n            configureIgnoreBeanInfo(environment);\n            // 设置启动 banner 图片\n            Banner printedBanner = printBanner(environment);\n            // 创建 ApplicationContext 上下文对象\n            context = createApplicationContext();\n            exceptionReporters = getSpringFactoriesInstances(\n                    SpringBootExceptionReporter.class,\n                    new Class[] { ConfigurableApplicationContext.class }, context);\n            // 准备上下文对象，默认配置项，监听事件，环境变量，banner图片\n            // 加载 application.yml配置文件： \t\tpostProcessApplicationContext(context); // 使用 Resouce加载application.yml 配置文件\n            // 调用 ApplicationContextInitializer.initialize() 对applicationContext上下文进行初始化\n            // beanFactory.registerSingleton("springApplicationArguments", applicationArguments); // 添加需要特定单例模式的bean\n            prepareContext(context, environment, listeners, applicationArguments,\n                    printedBanner);\n            refreshContext(context);\n            afterRefresh(context, applicationArguments);\n            stopWatch.stop();\n            if (this.logStartupInfo) {\n                new StartupInfoLogger(this.mainApplicationClass)\n                        .logStarted(getApplicationLog(), stopWatch);\n            }\n            listeners.started(context);\n            callRunners(context, applicationArguments);\n        }\n        catch (Throwable ex) {\n            handleRunFailure(context, ex, exceptionReporters, listeners);\n            throw new IllegalStateException(ex);\n        }\n       \n        try {\n            listeners.running(context);\n        }\n        catch (Throwable ex) {\n            handleRunFailure(context, ex, exceptionReporters, null);\n            throw new IllegalStateException(ex);\n        }\n        return context;\n}\n\n\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br")])]),a("p",[n._v("-2 主要的启动步骤")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("1. 准备阶段：初始化阶段，会创建 SpringBoot的 ApplicationContext，并且加载应用程序的初始化配置信息\n2. 应用上下文 ApplicationContext 创建阶段：根据自动装配配置，Resource 加载 application.yml 的配置文件信息，配置各种组件和 需要特定单例模式的bean\n3. 刷新上下文阶段：创建web容器、执行启动任务开启监听器、初始化器\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("h2",{attrs:{id:"spring和springboot的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring和springboot的区别"}},[n._v("#")]),n._v(" spring和springboot的区别")]),n._v(" "),a("ul",[a("li",[n._v("spring解决了什么问题 ？ spring这里指的是SSM中的那套框架")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("解决的问题；（优点）\n    1. spring是Java企业版本（Java Enterprise Edition JEE也叫J2EE）的轻量级替代品。\n    2. spring无需开发重量级的EnterpriseJavaBean （EJB），提供了一套简单的方法。\n    3. 通过DI、IOC 和 AOP（面向切面编程）用简单的java对象实现了EJB的功能。\n    \n    1. spring的IOC容器，把对象之间的依赖关系交给spring管理，降低了服务之间的耦合性，让开发者更多的关注服务的具体业务逻辑。\n    2. spring提供了 事务滚利、WS（webService）\n    3. spring的AOP面向切面编程\n    4. 对主流框架有比较好的支持：mybatis、hibernate、struts，jpa等\n    5. spring的DI降低业务对象替换的复杂性\n    6. spring侵入性小、代码污染少\n    \n未解决的问题：\n    1. 繁杂的XML配置：\n    2. 项目依赖管理： 依赖库的版本冲突一直是一个大问题、版本兼容性问题\n    3. spring不支持分布式\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("h2",{attrs:{id:"springboot中的logback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springboot中的logback"}},[n._v("#")]),n._v(" springboot中的logback")]),n._v(" "),a("ul",[a("li",[n._v("日志框架、日志门面")]),n._v(" "),a("li",[n._v("项目： https://gitee.com/DemoMeng/better-skills/a-logback")]),n._v(" "),a("li",[n._v("JUL、JCL、Log4j、Slf4j、Logback、Log4j2")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('日志框架：\n  JUL： Java Util Log： java官方提供的log lib，但是使用不够广泛-原因： \n                            1 开发出的时间晚（2002年）第三方log lib广泛 、 \n                            2 性能问题不如Logback/Log4j、\n                            3 功能不够丰富比如默认没有从classpath加载文件\n                            \n  Log4j： Apache的一个开源项目、创始人：Ceki Gulcu。 java领域的元老项目。高度可配置、并通过运行时外部文件配置。\n           它根据记录的优先级别，并提供机制，以指示记录信息到许多的目的地，诸如：数据库，文件，控制台，UNIX 系统日志等\n           三个主要组成部分： \n                loggers： 负责捕获记录信息\n                appenders： 负责发布日志信息、以不同的首选目的地\n                layouts： 负责格式化不同风格的日志信息\n           缺点： 性能低，在logback出来之后，log4j使用也减少了         \n                \n  Logback： 创始人： Ceki Gulcu ，另外一个开源日志组件，是作为Log4j的继承者来开发的，提供了更好的性能实现，异步logger，filter更多特性\n               三个模块：\n                    logback-core：是下面两个模块的基础模块\n                    logback-classic： 扩展了核心模块（logback-core），是log4j的一个改良版本、并且完整实现了 Slf4j 的api（可以实现和其他日志系统的来回切换），这样可以很方便更换日志系统为 log4j或者JDK1.4 Logging、或者JUL （java util logging）\n                    logback-access：  访问模块与 Servlet 容器集成、为tomcat等提供通过Http来访问日志的功能\n\n               \n               主要关键：\n                     Logger：（logback-classic）\n                     Appender：（logback-core）\n                     Layout：（logback-core）\n                     Root\n                     \n                     filter: 过滤器，用于配置过滤不同的日志级别，主要使用的有： 临界值过滤器（ThresholdFilter），级别过滤器 （LevelFilter） \n                     level\n                     logger\n                    \n                    \n  Log4j2： 基于 Log4j 上为了提高其性能而开发出了 Log4j2             \n            Log4j2 和 Log4j并不兼容，并且设计模仿 Logback，性能倒是提高了不少\n            Log4j2 也做了 Facade（门面）/Implementation（实现） 分离的设计，分成了 log4j-api 和 log4j-core。\n\n  ******对比\n性能上 Log4j2 要强，但是生态上 Logback是优先的  \n1 log4j2比logback更新：log4j2的GA版在2014年底才推出，比logback晚了好几年，这期间log4j2确实吸收了slf4j和logback的一些优点（比如日志模板），同时应用了不少的新技术 \n2 由于采用了更先进的锁机制和LMAX Disruptor库，log4j2的性能优于logback，特别是在多线程环境下和使用异步日志的环境下 \n3 二者都支持Filter（应该说是log4j2借鉴了logback的Filter），能够实现灵活的日志记录规则（例如仅对一部分用户记录debug级别的日志） \n4 二者都支持对配置文件的动态更新 \n5 二者都能够适配slf4j，logback与slf4j的适配应该会更好一些，毕竟省掉了一层适配库 \n6 logback能够自动压缩/删除旧日志 \n7 logback提供了对日志的HTTP访问功能 \n8 log4j2实现了“无垃圾”和“低垃圾”模式。简单地说，log4j2在记录日志时，能够重用对象（如String等），尽可能避免实例化新的临时对象，减少因日志记录产生的垃圾对象，减少垃圾回收带来的性能下降 \n9 log4j2和logback各有长处，总体来说，如果对性能要求比较高的话，log4j2相对还是较优的选择。\n\n日志门面：\n  JCL： common-logging 是apache的一个开源项目，也叫做 Jakarta Common Logging，缩写 JCL\n        common-logging 的功能是提供日志功能的 API 接口，本身并不提供日志的具体实现（当然，common-logging 内部有一个 Simple logger 的简单实现，但是功能很弱，直接忽略），\n        而是在运行时动态的绑定日志实现组件来工作（如 log4j、java.util.loggin）。\n  \n  Slf4j： Simple Logging Facade For Java： 简单java日志门面，创始人： Ceki Gulcu\n          类似于 Common-Logging，slf4j 是对不同日志框架提供的一个 API 封装，可以在部署的时候不修改任何配置即可接入一种日志实现方案。\n          但是，slf4j 在编译时静态绑定真正的 Log 库。使用 SLF4J 时，如果你需要使用某一种日志实现，那么你必须选择正确的 SLF4J 的 jar 包的集合（各种桥接包）。\n          \n            \n  ********对比*********\n  slf4j 库类似于 Apache Common-Logging。但是，他在编译时静态绑定真正的日志库。这点似乎很麻烦，其实也不过是导入桥接 jar 包而已。\n  不需要使用logger.isDebugEnabled()来解决日志因为字符拼接产生的性能问题。slf4j 的方式是使用{}作为字符串替换符，形式如： logger.debug("id: {}, name: {} ", id, name);\n  \n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br")])]),a("ul",[a("li",[n._v("搭配使用")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\nslf4j + logback \n\ncommon-logging + log4j\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("h2",{attrs:{id:"springboot-mdc-全链路调用日志追踪"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springboot-mdc-全链路调用日志追踪"}},[n._v("#")]),n._v(" springboot + MDC 全链路调用日志追踪")]),n._v(" "),a("ul",[a("li",[n._v("MDC: Mapped Diagnostic Context 映射调试上下文，是 Log4j， Logback 、 Log4j2 提供的一种方便下多线程下记录日志的功能。\nMDC可以看作一个与当前线程绑定的哈希表。可以往里面添加键值对。")]),n._v(" "),a("li",[n._v("MDC的相关API ：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("clear() ：移除所有MDC\nget (String key) ：获取当前线程MDC中指定key的值\ngetContext() ：获取当前线程MDC的MDC\nput(String key, Object o) ：往当前线程的MDC中存入指定的键值对\nremove(String key) ：删除当前线程MDC中指定的键值对\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("ul",[a("li",[n._v("解决方案")]),n._v(" "),a("li",[a("ol",[a("li",[n._v("调整Hystrix隔离策略")])])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("Hystrix的资源隔离策略分为两种： 线程池（Thread） 和 信号量（Semaphore）\n    hystrix.command.default.execution.isolation.strategy: SEMAPHORE\n    Hystrix默认的隔离配置是Thread，但是无法获取到MDC（不是同一个线程）、也无法获取到相同请求的HttpServletRequest对象（不是同一个线程）\n    设置隔离策略为信号量后Feign拦截器中就能获取MDC值，但该方案不是特别好。原因是Hystrix官方强烈建议使用THREAD作为隔离策略。\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("ul",[a("li",[a("ol",{attrs:{start:"2"}},[a("li",[n._v("自定义策略扩展 HystrixConcurrencyStrategy 并且通过 HystrixPlugins 注册")])])])]),n._v(" "),a("ul",[a("li",[n._v("具体配置：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("相关依赖： web依赖、hystrix-core依赖\n<dependency>\n <groupId>org.springframework.boot</groupId>\n <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n\n\x3c!-- 包含了hystrix-core依赖 --\x3e\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-starter-openfeign</artifactId>\n <version>2.1.3.RELEASE</version>\n</dependency>\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])]),a("ul",[a("li",[n._v("一：  RequestContextHystrixStrategy 继承 HystrixPlugins，目的把当前Request对象传递给Feign上下文")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("package com.qingwang.mars.springcloud.hystrix;\n\nimport com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategy;\nimport org.springframework.web.context.request.RequestAttributes;\nimport org.springframework.web.context.request.RequestContextHolder;\n\nimport java.util.concurrent.Callable;\n\n/**\n * 版权所有  copyright© 蒙大拿\n *\n * @author mqz\n * @date 2022/3/28\n * @about https://www.gitee.com/DemoMeng\n * @description\n */\npublic class RequestContextHystrixStrategy extends HystrixConcurrencyStrategy {\n\n    @Override\n    public <T> Callable<T> wrapCallable(Callable<T> callable) {\n        return new RequestAttributeAwareCallable<>(callable, RequestContextHolder.getRequestAttributes());\n    }\n\n    static class RequestAttributeAwareCallable<T> implements Callable<T> {\n\n        private final Callable<T> delegate;\n        private final RequestAttributes requestAttributes;\n\n        public RequestAttributeAwareCallable(Callable<T> callable, RequestAttributes requestAttributes) {\n            this.delegate = callable;\n            this.requestAttributes = requestAttributes;\n        }\n\n        @Override\n        public T call() throws Exception {\n            try {\n                RequestContextHolder.setRequestAttributes(requestAttributes);\n                return delegate.call();\n            } finally {\n                RequestContextHolder.resetRequestAttributes();\n            }\n        }\n    }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br")])]),a("ul",[a("li",[n._v("二：  重写Feign的拦截器（RequestInterceptor），只要feign调用就会走拦截器，并把上面的设置进来的Request，获取logId，传递给feign被调用系统")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('package com.qingwang.mars.springcloud.openfeign;\n\nimport com.qingwang.mars.base.constants.LocalConstant;\nimport feign.RequestInterceptor;\nimport feign.RequestTemplate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport javax.servlet.http.HttpServletRequest;\n\n/**\n * 版权所有  copyright© 蒙大拿\n *\n * @author mqz\n * @date 2022/3/28\n * @about https://www.gitee.com/DemoMeng\n * @description\n */\n@Configuration\npublic class GlobalFeignInterceptor implements RequestInterceptor {\n\n    private final static Logger log = LoggerFactory.getLogger(GlobalFeignInterceptor.class);\n\n    @Override\n    public void apply(RequestTemplate template) {\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        if(attributes != null){\n            HttpServletRequest request = attributes.getRequest();\n            String requestId = request.getParameter(LocalConstant.LOG_ID);\n            log.info("requestInterceptor: requestId: {} ",requestId);\n            if(! StringUtils.isEmpty(requestId)){\n                template.query("logId",requestId);\n            }\n        }\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br")])]),a("ul",[a("li",[n._v("三： 将自定义的Hystrix策略注册到当前策略中")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("@PostConstruct\npublic void init() {\n    HystrixPlugins.getInstance().registerConcurrencyStrategy(new RequestContextHystrixStrategy());\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("ul",[a("li",[n._v("三.1 : application.yml配置自定义的Hystrix策略所在的包位置 （似乎可以不用配置！！）")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("hystrix:\n plugin:\n   HystrixConcurrencyStrategy:\n     implementation: com.qingwang.mars.springcloud.hystrix.RequestContextHystrixStrategy\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("ul",[a("li",[n._v("三.2 : logback获取logId：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<property name="log.pattern" value="[%X{requestId}]-%d{yyyy-MM-dd HH:mm:ss} %-5level %thread %logger %msg%n"/>\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("ul",[a("li",[a("p",[n._v("四： feign调用方\n"),a("a",{attrs:{"data-fancybox":"",title:"111",href:"springboot+mdc链路调用-feign调用方拦截器配置.png"}},[a("img",{attrs:{src:"springboot+mdc%E9%93%BE%E8%B7%AF%E8%B0%83%E7%94%A8-feign%E8%B0%83%E7%94%A8%E6%96%B9%E6%8B%A6%E6%88%AA%E5%99%A8%E9%85%8D%E7%BD%AE.png",alt:"springboot+mdc链路调用-feign调用方拦截器配置.png"}})])])]),n._v(" "),a("li",[a("p",[n._v("五： feign被调用方")])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('和调用方一致，从request中获取logId，并且设置到ThreadLocal、MDC中\n  String requestId = request.getParameter(LocalConstant.LOG_ID);\n  LocalContext.addArgument(LocalConstant.LOG_ID,requestId);\n  MDC.put("requestId", requestId);\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("p",[a("a",{attrs:{"data-fancybox":"",title:"111",href:"springboot+mdc链路调用-效果.png"}},[a("img",{attrs:{src:"springboot+mdc%E9%93%BE%E8%B7%AF%E8%B0%83%E7%94%A8-%E6%95%88%E6%9E%9C.png",alt:"springboot+mdc链路调用-效果.png"}})])]),n._v(" "),a("p",[n._v("##【spring中的IOC和DI的注入方式】\n##IOC Inverse Of Control 控制反转。\n它的作用是解除代码之间的耦合性，让程序专注核心的功能业务，其余杂事全部统一处理。\n那么作为spring的容器管理了各个实例，所以设计到实例的管理，和依赖关系。\n##DI Dependency Injection 依赖注入\n说的是实例和实例之间依赖关系的存在方式，以及如何使用示例的方法。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('注入方式的分类\n\n1.XML注入：\n    a.构造方法注入：构造方法中带参数并且赋值到静态变量，配置文件中使用标签<construct-arg></construct-arg>\n\n          @Service\n          public class InstanceB{\n                  private InstanceA a;\n                  public Demo(InstanceA ia){\n                      this.a = ia;\n                  }\n          }\n\n          xml配置文件：\n           <bean name="xxx" class="xxx.xxx.InstanceB">\n                <construct-arg name="a" class="xxx.xxx.InstanceA"></construct-arg>\n           </bean>\n\n    b.setter方法注入：构造方法中定义全局变量，并且使用setter方法，配置文件中使用<property></property>\n\n\n2.注解注入：\n\n    a.属性注入：\n        @Autowired\n        private InstanceB b;\n    b.setter方法注入：\n        private InstanceB b;\n\n        @Autowired\n        private void setB(InstanceB ib){\n             this.b = ib;\n        }\n    c.构造方法注入：\n        private InstanceB b;\n\n        @Autowired\n        public Demo(InstanceB ib){\n            this.b = ib;\n        }\n\n3. resource 注入\n\n        @Resource\n        private InstanceB b;\n\n@Resource  和  @Autowired 的区别\n    @Autowired是使用byType方式注入对象，若对象有多个则需要使用 @Quailfer("beanName)\n            @Autowired\n            @Quailfer("instanceB")\n            private InstanceB b;\n\n      或者在对象上加上 @Primary\n\n    @Resource 是根据bean的名称和类型注入对西那个\n')])])]),a("h2",{attrs:{id:"事务不生效的场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务不生效的场景"}},[n._v("#")]),n._v(" 事务不生效的场景")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    \n    \n    \n    事务特性：\n        原子性：atomicity:同时成功，同时失败。\n        一致性：consistency:事务执行之前，数据库需要保持一致性，即使执行了失败，也不能更新一张表，另外一张表却没有更新。（前后都是一致的）\n        隔离性：isolation：每个事务之间相互不影响。\n        持久性：durability事务执行成功之后，数据会及时更行到数据库\n\n\n    事务分类：\n        1.编程式事务：使用工厂获取到事务执行实例，分别调用 beginTransaction() 、commit() 、rollBack() 等事务管理方法，注意这些是写在代码中的\n                    优点： 1. 可以精细话控制事务的范围\n        2.声明式事务：使用spring的容器管理事务。可以使用\n                                       a.注解@Transactional\n                                       b.tx配置xml配置的方式-对于SSM项目比较常见\n                    缺点： \n                        1. 是对整个方法进行事务控制，无法精细化控制                   \n                    \n                                       \n\n    @Transactional注解：\n        1.作用范围：类，类方法，接口\n        2.作用范围作用意义：\n            类：当注解在类上时，标明该类下的所有public方法都配置相同的事务属性信息。\n            类方法：public方法下才能生效，如果类上有注解，方法上也有注解，那么方法的事务配置会覆盖类的事务的配置信息。\n            接口：不推荐使用这种方法，因为一旦在接口上配置了springAOP使用CGLib动态代理\n            \n        \n        @Transactional是使用 AOP 实现的，本质就是在目标方法执行前后进行拦截。在目标方法执行前加入或创建一个事务，在执行方法执行后，根据实际情况选择提交或是回滚事务。\n         当 Spring 遇到该注解时，会自动从数据库连接池中获取 connection，并开启事务然后绑定到 ThreadLocal 上，\n         对于@Transactional注解包裹的整个方法都是使用同一个connection连接。如果我们出现了耗时的操作，比如第三方接口调用，业务逻辑复杂，大批量数据处理等就会导致我们我们占用这个connection的时间会很长，\n         数据库连接一直被占用不释放。一旦类似操作过多，就会导致数据库连接池耗尽。在一个事务中执行RPC操作导致数据库连接池撑爆属于是典型的长事务问题，类似的操作还有在事务中进行大量数据查询，业务规则处理等...\n        @Transactional注解的声明式事务是通过spring aop起作用的，而spring aop需要生成代理对象，直接在同一个类中方法调用使用的还是原始对象，事务不生效。 \n        \n        长事务：   运行时间较长，并且长时间未提交的事务，也称之为大事务。\n        长事务会引发哪些问题：\n            1 数据库连接池被占满，长时间没有close释放资源，应用无法获取连接资源。\n            2 容易引发数据库死锁。\n            3 数据库回滚时间较长\n            4 在主从架构重导致主从延迟变大\n        如何避免长事务： \n            1 拆分事务的方法，不需要事务管理的的逻辑抽离成独立方法，变小事务，减少事务的颗粒度\n            \n\n    @Transactional 属性：\n        propagation属性（冒泡属性）\n            propagation 代表事务的传播行为，默认值为 Propagation.REQUIRED，其他的属性信息如下：\n            Propagation.REQUIRED：如果当前存在事务，则加入该事务，如果当前不存在事务，则创建一个新的事务。( 也就是说如果A方法和B方法都添加了注解，在默认传播模式下，A方法内部调用B方法，会把两个方法的事务合并为一个事务 ）\n            Propagation.SUPPORTS：如果当前存在事务，则加入该事务；如果当前不存在事务，则以非事务的方式继续运行。\n            Propagation.MANDATORY：如果当前存在事务，则加入该事务；如果当前不存在事务，则抛出异常。\n            Propagation.REQUIRES_NEW：重新创建一个新的事务，如果当前存在事务，暂停当前的事务。( 当类A中的 a 方法用默认Propagation.REQUIRED模式，类B中的 b方法加上采用 Propagation.REQUIRES_NEW模式，然后在 a 方法中调用 b方法操作数据库，然而 a方法抛出异常后，b方法并没有进行回滚，因为Propagation.REQUIRES_NEW会暂停 a方法的事务 )\n            Propagation.NOT_SUPPORTED：以非事务的方式运行，如果当前存在事务，暂停当前的事务。\n            Propagation.NEVER：以非事务的方式运行，如果当前存在事务，则抛出异常。\n            Propagation.NESTED ：和 Propagation.REQUIRED 效果一样。\n\n        isolation 属性 ： 当spring设置它自己的隔离级别，会覆盖mysql设置的隔离级别\n            isolation ：spring事务的隔离级别，默认值为 Isolation.DEFAULT。\n            Isolation.DEFAULT：使用底层数据库默认的隔离级别。\n            Isolation.READ_UNCOMMITTED ： 读未提交 ，容易产生脏读\n            Isolation.READ_COMMITTED ：读已经提交，容易产生不可\n            Isolation.REPEATABLE_READ\n            Isolation.SERIALIZABLE\n\n        timeout 属性\n            timeout ：事务的超时时间，默认值为 -1。如果超过该时间限制但事务还没有完成，则自动回滚事务。\n\n        readOnly 属性\n            readOnly ：指定事务是否为只读事务，默认值为 false；为了忽略那些不需要事务的方法，比如读取数据，可以设置 read-only 为 true。\n\n        rollbackFor 属性\n            rollbackFor ：用于指定能够触发事务回滚的异常类型，可以指定多个异常类型。\n\n        noRollbackFor 属性\n            noRollbackFor：抛出指定的异常类型，不回滚事务，也可以指定多个异常类型。\n\n    不生效的场景：\n        1.数据库引擎：myISAM引擎是不支持事务机制。innoDB支持事务机制\n        2.修饰的方法必须是public的（spring+aop），如果非要在public的方法上加上事务，可以使用AspectJ代理:\n            原因：在Spring AOP 代理时，如上图所示 TransactionInterceptor （事务拦截器）在目标方法执行前后进行拦截，\n                 DynamicAdvisedInterceptor（CglibAopProxy 的内部类）的 intercept 方法或 JdkDynamicAopProxy 的 invoke 方法会间接调用\n                 AbstractFallbackTransactionAttributeSource的computeTransactionAttribute 方法，获取Transactional 注解的事务配置信息。\n            注意：protected、private 修饰的方法上使用 @Transactional 注解，虽然事务无效，但不会有任何报错，这是我们很容犯错的一点。\n\n        3.@Transactional中的propagation属性设置错\n            TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。\n            TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。\n            TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。\n\n        3.异常被捕获了，没有异常抛出。\n        4.异常类型错误：事务回滚的正常类型是RuntimeException:\n            Spring默认抛出了未检查unchecked异常（继承自 RuntimeException 的异常）或者 Error才回滚事务\n            其他异常不会触发回滚事务。如果在事务中抛出其他类型的异常，但却期望 Spring 能够回滚事务，就需要指定rollbackFor属性。\n\n                @Service\n                public class OrderServiceImpl implements OrderService {\n                    @Transactional\n                    public void updateOrder(Order order) {\n                        try {\n                            // update order\n                        } catch {\n                            throw new Exception("更新错误");\n                        }\n                    }\n                }\n                //如果想要事务生效 ，@Transactional(rollbackFor = Exception.class)\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br"),a("span",{staticClass:"line-number"},[n._v("70")]),a("br"),a("span",{staticClass:"line-number"},[n._v("71")]),a("br"),a("span",{staticClass:"line-number"},[n._v("72")]),a("br"),a("span",{staticClass:"line-number"},[n._v("73")]),a("br"),a("span",{staticClass:"line-number"},[n._v("74")]),a("br"),a("span",{staticClass:"line-number"},[n._v("75")]),a("br"),a("span",{staticClass:"line-number"},[n._v("76")]),a("br"),a("span",{staticClass:"line-number"},[n._v("77")]),a("br"),a("span",{staticClass:"line-number"},[n._v("78")]),a("br"),a("span",{staticClass:"line-number"},[n._v("79")]),a("br"),a("span",{staticClass:"line-number"},[n._v("80")]),a("br"),a("span",{staticClass:"line-number"},[n._v("81")]),a("br"),a("span",{staticClass:"line-number"},[n._v("82")]),a("br"),a("span",{staticClass:"line-number"},[n._v("83")]),a("br"),a("span",{staticClass:"line-number"},[n._v("84")]),a("br"),a("span",{staticClass:"line-number"},[n._v("85")]),a("br"),a("span",{staticClass:"line-number"},[n._v("86")]),a("br"),a("span",{staticClass:"line-number"},[n._v("87")]),a("br"),a("span",{staticClass:"line-number"},[n._v("88")]),a("br"),a("span",{staticClass:"line-number"},[n._v("89")]),a("br"),a("span",{staticClass:"line-number"},[n._v("90")]),a("br"),a("span",{staticClass:"line-number"},[n._v("91")]),a("br"),a("span",{staticClass:"line-number"},[n._v("92")]),a("br"),a("span",{staticClass:"line-number"},[n._v("93")]),a("br"),a("span",{staticClass:"line-number"},[n._v("94")]),a("br"),a("span",{staticClass:"line-number"},[n._v("95")]),a("br"),a("span",{staticClass:"line-number"},[n._v("96")]),a("br"),a("span",{staticClass:"line-number"},[n._v("97")]),a("br"),a("span",{staticClass:"line-number"},[n._v("98")]),a("br"),a("span",{staticClass:"line-number"},[n._v("99")]),a("br"),a("span",{staticClass:"line-number"},[n._v("100")]),a("br"),a("span",{staticClass:"line-number"},[n._v("101")]),a("br"),a("span",{staticClass:"line-number"},[n._v("102")]),a("br"),a("span",{staticClass:"line-number"},[n._v("103")]),a("br"),a("span",{staticClass:"line-number"},[n._v("104")]),a("br"),a("span",{staticClass:"line-number"},[n._v("105")]),a("br"),a("span",{staticClass:"line-number"},[n._v("106")]),a("br"),a("span",{staticClass:"line-number"},[n._v("107")]),a("br")])]),a("h2",{attrs:{id:"异步任务调度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步任务调度"}},[n._v("#")]),n._v(" 异步任务调度")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('\n【Application的配置】\n    ******其他的配置*******\n    @EnableAsync\n    @EnableScheduling\n    public class HlwManageApplication {\n        public static void main(String[] args) {\n            SpringApplication.run(HlwManageApplication.class, args);\n        }\n        @Bean(name = "threadPoolTaskExecutor")\n        public Executor threadPoolTaskExecutor() {\n            return new ThreadPoolTaskExecutor();\n        }\n    }\n\n【异步调度相关配置】\n\n    @Configuration\n    @EnableAsync\n    @EnableScheduling\n    public class SchedulingConfiguration implements SchedulingConfigurer, AsyncConfigurer {\n        private Logger logger = LoggerFactory.getLogger(SchedulingConfiguration.class);\n        @Bean\n        public TaskScheduler taskScheduler() {\n            ThreadPoolTaskScheduler taskScheduler = new ThreadPoolTaskScheduler();\n            taskScheduler.setPoolSize(10);/**配置线程池大小，根据任务数量定制*/\n            taskScheduler.setThreadNamePrefix("spring-task-scheduler-thread-");/**线程名称前缀*/\n            taskScheduler.setAwaitTerminationSeconds(60);/**线程池关闭前最大等待时间，确保最后一定关闭*/\n            taskScheduler.setWaitForTasksToCompleteOnShutdown(true);/**线程池关闭时等待所有任务完成*/\n            taskScheduler.setRejectedExecutionHandler(new ThreadPoolExecutor.AbortPolicy());/**任务丢弃策略*/\n            return taskScheduler;\n        }\n        @Override\n        public void configureTasks(ScheduledTaskRegistrar scheduledTaskRegistrar) {\n        }\n        @Override\n        public Executor getAsyncExecutor() {\n            ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n            executor.setCorePoolSize(20);/**配置核心线程数*/\n            executor.setMaxPoolSize(50);/**配置最大线程数*/\n            executor.setQueueCapacity(100);/**配置缓存队列大小*/\n            executor.setKeepAliveSeconds(15);/**空闲线程存活时间*/\n            executor.setThreadNamePrefix("spring-task-executor-thread-");\n            /**线程池对拒绝任务的处理策略：这里采用了CallerRunsPolicy策略，当线程池没有处理能力的时候，该策略会直接在execute方法的调用线程中运行被拒绝的任务；如果执行程序已关闭，则会丢弃该任务*/\n            executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());/**AbortPolicy()*/\n            /**等待所有任务结束后再关闭线程池*/\n            executor.setWaitForTasksToCompleteOnShutdown(true);\n            /**设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是被没有完成的任务阻塞*/\n            executor.setAwaitTerminationSeconds(60);\n            executor.initialize();\n            return executor;\n        }\n        @Override\n        public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {\n            return new SpringAsyncExceptionHandler();\n        }\n        class SpringAsyncExceptionHandler implements AsyncUncaughtExceptionHandler {\n            @Override\n            public void handleUncaughtException(Throwable throwable, Method method, Object... objects) {\n                logger.error("Exception occurs in async method", throwable);\n            }\n        }\n    }\n\n 【使用异步调度执行具体任务-A:异步调用】\n    @Component\n    @EnableScheduling\n    @Async\n    public class AsyncTaskExecute {\n\n        private static final Logger log = LoggerFactory.getLogger(AsyncTaskExecute.class);\n\n        @Autowired\n        private IHlwManageRoleService roleService;\n\n        @Autowired\n        private IHlwManageUserService userService;\n\n        @Value("${my.token.expire}")\n        private long tokenExpireTime;\n\n\n\n        @Async\n        public void pushCurrentRole(Long id){\n            HlwManageRole role = roleService.currentRole(id);\n            RedisService.set(CommonConstants.Current.CURRENT_ROLE+id,role,tokenExpireTime);\n            log.info("当前用户角色已经存入缓存中");\n        }\n\n        @Async\n        public void updateLogin(Long currentId, Date date,String ip) {\n            try {\n                Thread.sleep(10000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            HlwManageUser user = new HlwManageUser()\n                    .setId(currentId)\n                    .setLoginDate(date)\n                    .setLoginIp(ip)\n                    .setArea(AddressUtils.getAreaWithGD(ip));\n            userService.updateById(user);\n            log.info("登录信息已更新");\n        }\n    }\n    \n 【使用异步调度执行具体任务-B:定时执行】\n @Component\n @EnableScheduling\n @EnableAsync\n public class ScheduleTask {\n\n     private static final Logger log = LoggerFactory.getLogger(ScheduleTask.class);\n\n     @Autowired\n     private IHlwManageUserService userService;\n\n     @Autowired\n     private IHlwManageUserRoleService userRoleService;\n\n     @Autowired\n     private IHlwManageLogService logService;\n\n     @Async\n     @Scheduled(cron = "0/60 * *  * * ? ") // 每60秒执行\n     public void autoLog2(){\n         List<MessageBean> mbList = (List<MessageBean>) RedisService.get(CommonConstants.KEY_FOR_MESSAGE_LIST);\n         List<MessageBean> left = new ArrayList<>();\n         if(mbList != null && mbList.size() >0) {\n             log.info("【信息】执行定时任务..."+mbList.size());\n             for (MessageBean model : mbList) {\n                 HlwManageUser user = userService.getById(model.getUserId());\n                 if (user != null) {\n                     HlwManageLog hlwManageLog = new HlwManageLog()\n                             .setIp(model.getIp())\n                             //.setRequestMethod(request.getMethod())\n                             .setCreateDate(model.getCreateDate())\n                             //.setRequestUri(request.getRequestURL().toString())\n                             .setOperator(user.getId())\n                             .setOperatorName(user.getName())\n                             //.setRequestParams(WebCommonUtils.getRequestParams())\n                             .setOperateAccount(user.getLoginName())\n                             .setOperatorRole(userRoleService.getByUserId(user.getId()))\n                             .setDescription(model.getDescription())\n                             .setResult(model.getResult());\n                     if(logService.save(hlwManageLog)) {\n                         log.info("*****************消息保存成功：" + hlwManageLog.getId() + " ***************");\n                         continue;\n                     }\n                     log.info("*****************消息保存未能成功：" + model.getUserId()+model.getDescription() + " ***************");\n                     left.add(model);\n                 }\n             }\n             RedisService.del(CommonConstants.KEY_FOR_MESSAGE_LIST);\n             RedisService.set(CommonConstants.KEY_FOR_MESSAGE_LIST,left);\n          }\n     }\n }\n\nMore than one TaskExecutor bean found within the context, and none is named \'taskExecutor\'. Mark one of them as primary or name it \'taskExecutor\' (possibly as an alias) in order to use it for async processing: [taskScheduler, applicationTaskExecutor]\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br"),a("span",{staticClass:"line-number"},[n._v("70")]),a("br"),a("span",{staticClass:"line-number"},[n._v("71")]),a("br"),a("span",{staticClass:"line-number"},[n._v("72")]),a("br"),a("span",{staticClass:"line-number"},[n._v("73")]),a("br"),a("span",{staticClass:"line-number"},[n._v("74")]),a("br"),a("span",{staticClass:"line-number"},[n._v("75")]),a("br"),a("span",{staticClass:"line-number"},[n._v("76")]),a("br"),a("span",{staticClass:"line-number"},[n._v("77")]),a("br"),a("span",{staticClass:"line-number"},[n._v("78")]),a("br"),a("span",{staticClass:"line-number"},[n._v("79")]),a("br"),a("span",{staticClass:"line-number"},[n._v("80")]),a("br"),a("span",{staticClass:"line-number"},[n._v("81")]),a("br"),a("span",{staticClass:"line-number"},[n._v("82")]),a("br"),a("span",{staticClass:"line-number"},[n._v("83")]),a("br"),a("span",{staticClass:"line-number"},[n._v("84")]),a("br"),a("span",{staticClass:"line-number"},[n._v("85")]),a("br"),a("span",{staticClass:"line-number"},[n._v("86")]),a("br"),a("span",{staticClass:"line-number"},[n._v("87")]),a("br"),a("span",{staticClass:"line-number"},[n._v("88")]),a("br"),a("span",{staticClass:"line-number"},[n._v("89")]),a("br"),a("span",{staticClass:"line-number"},[n._v("90")]),a("br"),a("span",{staticClass:"line-number"},[n._v("91")]),a("br"),a("span",{staticClass:"line-number"},[n._v("92")]),a("br"),a("span",{staticClass:"line-number"},[n._v("93")]),a("br"),a("span",{staticClass:"line-number"},[n._v("94")]),a("br"),a("span",{staticClass:"line-number"},[n._v("95")]),a("br"),a("span",{staticClass:"line-number"},[n._v("96")]),a("br"),a("span",{staticClass:"line-number"},[n._v("97")]),a("br"),a("span",{staticClass:"line-number"},[n._v("98")]),a("br"),a("span",{staticClass:"line-number"},[n._v("99")]),a("br"),a("span",{staticClass:"line-number"},[n._v("100")]),a("br"),a("span",{staticClass:"line-number"},[n._v("101")]),a("br"),a("span",{staticClass:"line-number"},[n._v("102")]),a("br"),a("span",{staticClass:"line-number"},[n._v("103")]),a("br"),a("span",{staticClass:"line-number"},[n._v("104")]),a("br"),a("span",{staticClass:"line-number"},[n._v("105")]),a("br"),a("span",{staticClass:"line-number"},[n._v("106")]),a("br"),a("span",{staticClass:"line-number"},[n._v("107")]),a("br"),a("span",{staticClass:"line-number"},[n._v("108")]),a("br"),a("span",{staticClass:"line-number"},[n._v("109")]),a("br"),a("span",{staticClass:"line-number"},[n._v("110")]),a("br"),a("span",{staticClass:"line-number"},[n._v("111")]),a("br"),a("span",{staticClass:"line-number"},[n._v("112")]),a("br"),a("span",{staticClass:"line-number"},[n._v("113")]),a("br"),a("span",{staticClass:"line-number"},[n._v("114")]),a("br"),a("span",{staticClass:"line-number"},[n._v("115")]),a("br"),a("span",{staticClass:"line-number"},[n._v("116")]),a("br"),a("span",{staticClass:"line-number"},[n._v("117")]),a("br"),a("span",{staticClass:"line-number"},[n._v("118")]),a("br"),a("span",{staticClass:"line-number"},[n._v("119")]),a("br"),a("span",{staticClass:"line-number"},[n._v("120")]),a("br"),a("span",{staticClass:"line-number"},[n._v("121")]),a("br"),a("span",{staticClass:"line-number"},[n._v("122")]),a("br"),a("span",{staticClass:"line-number"},[n._v("123")]),a("br"),a("span",{staticClass:"line-number"},[n._v("124")]),a("br"),a("span",{staticClass:"line-number"},[n._v("125")]),a("br"),a("span",{staticClass:"line-number"},[n._v("126")]),a("br"),a("span",{staticClass:"line-number"},[n._v("127")]),a("br"),a("span",{staticClass:"line-number"},[n._v("128")]),a("br"),a("span",{staticClass:"line-number"},[n._v("129")]),a("br"),a("span",{staticClass:"line-number"},[n._v("130")]),a("br"),a("span",{staticClass:"line-number"},[n._v("131")]),a("br"),a("span",{staticClass:"line-number"},[n._v("132")]),a("br"),a("span",{staticClass:"line-number"},[n._v("133")]),a("br"),a("span",{staticClass:"line-number"},[n._v("134")]),a("br"),a("span",{staticClass:"line-number"},[n._v("135")]),a("br"),a("span",{staticClass:"line-number"},[n._v("136")]),a("br"),a("span",{staticClass:"line-number"},[n._v("137")]),a("br"),a("span",{staticClass:"line-number"},[n._v("138")]),a("br"),a("span",{staticClass:"line-number"},[n._v("139")]),a("br"),a("span",{staticClass:"line-number"},[n._v("140")]),a("br"),a("span",{staticClass:"line-number"},[n._v("141")]),a("br"),a("span",{staticClass:"line-number"},[n._v("142")]),a("br"),a("span",{staticClass:"line-number"},[n._v("143")]),a("br"),a("span",{staticClass:"line-number"},[n._v("144")]),a("br"),a("span",{staticClass:"line-number"},[n._v("145")]),a("br"),a("span",{staticClass:"line-number"},[n._v("146")]),a("br"),a("span",{staticClass:"line-number"},[n._v("147")]),a("br"),a("span",{staticClass:"line-number"},[n._v("148")]),a("br"),a("span",{staticClass:"line-number"},[n._v("149")]),a("br"),a("span",{staticClass:"line-number"},[n._v("150")]),a("br"),a("span",{staticClass:"line-number"},[n._v("151")]),a("br"),a("span",{staticClass:"line-number"},[n._v("152")]),a("br"),a("span",{staticClass:"line-number"},[n._v("153")]),a("br"),a("span",{staticClass:"line-number"},[n._v("154")]),a("br"),a("span",{staticClass:"line-number"},[n._v("155")]),a("br"),a("span",{staticClass:"line-number"},[n._v("156")]),a("br"),a("span",{staticClass:"line-number"},[n._v("157")]),a("br"),a("span",{staticClass:"line-number"},[n._v("158")]),a("br"),a("span",{staticClass:"line-number"},[n._v("159")]),a("br"),a("span",{staticClass:"line-number"},[n._v("160")]),a("br"),a("span",{staticClass:"line-number"},[n._v("161")]),a("br")])]),a("h2",{attrs:{id:"springboot常用注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springboot常用注解"}},[n._v("#")]),n._v(" SpringBoot常用注解")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('一、常见注解\n    @SpringBootConfiguration  <==>  @Configuration + @ComponentScan + @EnableAutoConfiguration\n    @EnableAutoConfiguration 自动配置。\n    @ImportResource    加载xml配置，一般是放在启动main类上， @ImportResource("classpath*:/spring/*.xml")  单个 、 @ImportResource({"classpath*:/spring/1.xml","classpath*:/spring/2.xml"})   多个\n    @Value    获取application.yml 中的属性\n    @ConfigurationProperties(prefix="user") 获取application.yml 对象属性\n    @EnableConfigurationProperties   用 @EnableConfigurationProperties注解使 @ConfigurationProperties生效，并从IOC容器中获取bean。\n    @RestController  注解是@Controller和@ResponseBody的合集,表示这是个控制器bean,并且是将函数的返回值直 接填入HTTP响应体中,是REST风格的控制器。\n    @RequestMapping\n    @GetMapping\n    @PostMapping\n    @RequestParam   URL的请求参数\n    @ResponseBody  支持将返回值放在response体内，而不是返回一个页面\n    @Bean     @Bean(name="bean的名字",initMethod="初始化时调用方法名字",destroyMethod="close")\n    @Controller\n    @Service\n    @Repository\n    @Component:   可配合CommandLineRunner使用，在程序启动后执行一些基础任务\n    @PostContruct   spring容器初始化时，要执行该方法\n    @PathVariable      用来获得请求url中的动态参数\n    @ComponentScan:   让spring Boot扫描到Configuration类并把它加入到程序上下文\n    @EnableZuulProxy:  路由网关的主要目的是为了让所有的微服务对外只有一个接口，我们只需访问一个网关地址，即可由网关将所有的请求代理到不同的服务中。Spring Cloud是通过Zuul来实现的，支持自动路由映射到在Eureka Server上注册的服务。Spring Cloud提供了注解@EnableZuulProxy来启用路由代理。\n    @Autowired ：    在默认情况下使用 @Autowired 注释进行自动注入时，Spring 容器中匹配的候选 Bean 数目必须有且仅有一个。当找不到一个匹配的 Bean 时，Spring 容器将抛出 BeanCreationException 异常，并指出必须至少拥有一个匹配的 Bean。 \n                     当不能确定 Spring 容器中一定拥有某个类的 Bean 时，可以在需要自动注入该类 Bean 的地方可以使用 @Autowired(required = false)，这等于告诉 Spring: 在找不到匹配 Bean 时也不报错 \n    @Resource\n    @Configuration: 声明这是一个配制\n    @Import(Config.class)\n    @Order  值越小优先级超高，越先运行\n    @ConditionalOnExpression  @ConditionalOnExpression("${enabled:false}") 开关为true的时候才实例化bean\n    @ConditionalOnProperty  \n    @ConditionalOnClass \n    @ConditionalOnMissingClass({ApplicationManager.class})   如果存在它修饰的类的bean，则不需要再创建这个bean；\n    @ConditionOnMissingBean(name="example")   表示如果name为“example”的bean存在，该注解修饰的代码块不执行。\n    @Configuration 等同于spring的XML配置文件；使用Java代码可以检查类型安全。\n    @JsonBackReference   解决嵌套外链问题。\n    @RepositoryRestResourcepublic    配合spring-boot-starter-data-rest使用。\n        \n二、注解(annotations)详解\n    @SpringBootApplication：申明让spring boot自动给程序进行必要的配置，这个配置等同于：@Configuration ，@EnableAutoConfiguration 和 @ComponentScan 三个配置。\n\n        package com.example.myproject;\n        import org.springframework.boot.SpringApplication;\n        import org.springframework.boot.autoconfigure.SpringBootApplication;\n        @SpringBootApplication // same as @Configuration @EnableAutoConfiguration @ComponentScan\n        public class Application {\n            public static void main(String[] args) {\n                SpringApplication.run(Application.class, args);\n            }\n        }\n\n    @ResponseBody：表示该方法的返回结果直接写入HTTP response body中，一般在异步获取数据时使用，用于构建RESTful的api。\n    在使用@RequestMapping后，返回值通常解析为跳转路径，加上@responsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。\n    比如异步获取json数据，加上@responsebody后，会直接返回json数据。\n    该注解一般会配合@RequestMapping一起使用。示例代码：\n    \n        @RequestMapping(“/test”)\n        @ResponseBody\n        public String test(){\n            return”ok”;\n        }\n\n    @Controller：用于定义控制器类，在spring 项目中由控制器负责将用户发来的URL请求转发到对应的服务接口（service层）\n    一般这个注解在类中，通常方法需要配合注解@RequestMapping。\n    示例代码：\n    \n        @Controller\n        @RequestMapping(“/demoInfo”)\n        publicclass DemoController {\n            @Autowired\n            private DemoInfoService demoInfoService;\n        \n            @RequestMapping("/hello")\n            public String hello(Map map){\n                System.out.println("DemoController.hello()");\n                map.put("hello","from TemplateController.helloHtml");\n                //会使用hello.html或者hello.ftl模板进行渲染显示.\n                return"/hello";\n            }\n        }\n\n    @RestController：用于标注控制层组件(如struts中的action)，@ResponseBody和@Controller的合集。\n    示例代码：\n        package com.kfit.demo.web;\n        \n        import org.springframework.web.bind.annotation.RequestMapping;\n        import org.springframework.web.bind.annotation.RestController;\n        \n        @RestController\n        @RequestMapping(“/demoInfo2”)\n        public class DemoController2 {\n            @RequestMapping("/test")\n            public String test(){\n                return"ok";\n            }\n        }\n    \n    @RequestMapping：提供路由信息，负责URL到Controller中的具体函数的映射。\n    \n    @EnableAutoConfiguration：Spring Boot自动配置（auto-configuration）：尝试根据你添加的jar依赖自动配置你的Spring应用。\n    例如，如果你的classpath下存在HSQLDB，并且你没有手动配置任何数据库连接beans，那么我们将自动配置一个内存型（in-memory）数据库”。\n    你可以将@EnableAutoConfiguration或者@SpringBootApplication注解添加到一个@Configuration类上来选择自动配置。\n    如果发现应用了你不想要的特定自动配置类，你可以使用@EnableAutoConfiguration注解的排除属性来禁用它们。\n    @ComponentScan：表示将该类自动发现扫描组件。\n    个人理解相当于，如果扫描到有@Component、@Controller、@Service等这些注解的类，并注册为Bean，可以自动收集所有的Spring组件，包括@Configuration类。\n    我们经常使用@ComponentScan注解搜索beans，并结合@Autowired注解导入。可以自动收集所有的Spring组件，包括@Configuration类。\n    如果没有配置的话，Spring Boot会扫描启动类所在包下以及子包下的使用了@Service,@Repository等注解的类。\n    @Configuration：相当于传统的xml配置文件，如果有些第三方库需要用到xml文件，建议仍然通过@Configuration类作为项目的配置主类——可以使用@ImportResource注解加载xml配置文件。\n    @Import：用来导入其他配置类。\n    @ImportResource：用来加载xml配置文件。\n    @Autowired：自动导入依赖的bean\n    @Service：一般用于修饰service层的组件\n    @Repository：使用@Repository注解可以确保DAO或者repositories提供异常转译，这个注解修饰的DAO或者repositories类会被ComponetScan发现并配置，同时也不需要为它们提供XML配置项。\n    @Bean：用@Bean标注方法等价于XML中配置的bean。\n    @Value：注入Spring boot application.properties配置的属性的值。示例代码：\n    @Value(value = “#{message}”)\n    private String message;\n    @Inject：等价于默认的@Autowired，只是没有required属性；\n    @Component：泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。\n    @Bean：相当于XML中的,放在方法的上面，而不是类，意思是产生一个bean,并交给spring管理。\n    @AutoWired：自动导入依赖的bean。byType方式。把配置好的Bean拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。当加上（required=false）时，就算找不到bean也不报错。\n    @Qualifier：当有多个同一类型的Bean时，可以用@Qualifier(“name”)来指定。与@Autowired配合使用。@Qualifier限定描述符除了能根据名字进行注入，但能进行更细粒度的控制如何选择候选者，具体使用方式如下：\n    @Autowired\n    @Qualifier(value = “demoInfoService”)\n    private DemoInfoService demoInfoService;\n    @Resource(name=”name”,type=”type”)：没有括号内内容的话，默认byName。与@Autowired干类似的事。\n    \n    \n    \n三、JPA注解\n\n    @Entity：@Table(name=”“)：表明这是一个实体类。一般用于jpa这两个注解一般一块使用，但是如果表名和实体类名相同的话，@Table可以省略\n    @MappedSuperClass:用在确定是父类的entity上。父类的属性子类可以继承。\n    @NoRepositoryBean:一般用作父类的repository，有这个注解，spring不会去实例化该repository。\n    @Column：如果字段名与列名相同，则可以省略。\n    @Id：表示该属性为主键。\n    @GeneratedValue(strategy=GenerationType.SEQUENCE,generator= “repair_seq”)：表示主键生成策略是sequence（可以为Auto、IDENTITY、native等，Auto表示可在多个数据库间切换），指定sequence的名字是repair_seq。\n    @SequenceGeneretor(name = “repair_seq”, sequenceName = “seq_repair”, allocationSize = 1)：name为sequence的名称，以便使用，sequenceName为数据库的sequence名称，两个名称可以一致。\n    @Transient：表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性。\n                如果一个属性并非数据库表的字段映射,就务必将其标示为@Transient,否则,ORM框架默认其注解为@Basic。@Basic(fetch=FetchType.LAZY)：标记可以指定实体属性的加载方式\n    @JsonIgnore：作用是json序列化时将Java bean中的一些属性忽略掉,序列化和反序列化都受影响。\n    @JoinColumn（name=”loginId”）:一对一：本表中指向另一个表的外键。一对多：另一个表指向本表的外键。\n    @OneToOne、@OneToMany、@ManyToOne：对应hibernate配置文件中的一对一，一对多，多对一。\n    \n四、springMVC相关注解\n    1.@RequestMapping：@RequestMapping(“/path”)表示该控制器处理所有“/path”的UR L请求。\n        RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。该注解有六个属性：\n        params:指定request中必须包含某些参数值是，才让该方法处理。\n        headers:指定request中必须包含某些指定的header值，才能让该方法处理请求。\n        value:指定请求的实际地址，指定的地址可以是URI Template 模式\n        method:指定请求的method类型， GET、POST、PUT、DELETE等\n        consumes:指定处理请求的提交内容类型（Content-Type），如application/json,text/html;\n        produces:指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回\n    2@RequestParam：用在方法的参数前面。\n        @RequestParam\n        String a =request.getParameter(“a”)。\n    3.@PathVariable:路径变量。如\n        RequestMapping(“user/get/mac/{macAddress}”)\n        public String getByMacAddress(@PathVariable String macAddress){\n            //do something;\n        }\n        参数与大括号里的名字一样要相同。\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br"),a("span",{staticClass:"line-number"},[n._v("70")]),a("br"),a("span",{staticClass:"line-number"},[n._v("71")]),a("br"),a("span",{staticClass:"line-number"},[n._v("72")]),a("br"),a("span",{staticClass:"line-number"},[n._v("73")]),a("br"),a("span",{staticClass:"line-number"},[n._v("74")]),a("br"),a("span",{staticClass:"line-number"},[n._v("75")]),a("br"),a("span",{staticClass:"line-number"},[n._v("76")]),a("br"),a("span",{staticClass:"line-number"},[n._v("77")]),a("br"),a("span",{staticClass:"line-number"},[n._v("78")]),a("br"),a("span",{staticClass:"line-number"},[n._v("79")]),a("br"),a("span",{staticClass:"line-number"},[n._v("80")]),a("br"),a("span",{staticClass:"line-number"},[n._v("81")]),a("br"),a("span",{staticClass:"line-number"},[n._v("82")]),a("br"),a("span",{staticClass:"line-number"},[n._v("83")]),a("br"),a("span",{staticClass:"line-number"},[n._v("84")]),a("br"),a("span",{staticClass:"line-number"},[n._v("85")]),a("br"),a("span",{staticClass:"line-number"},[n._v("86")]),a("br"),a("span",{staticClass:"line-number"},[n._v("87")]),a("br"),a("span",{staticClass:"line-number"},[n._v("88")]),a("br"),a("span",{staticClass:"line-number"},[n._v("89")]),a("br"),a("span",{staticClass:"line-number"},[n._v("90")]),a("br"),a("span",{staticClass:"line-number"},[n._v("91")]),a("br"),a("span",{staticClass:"line-number"},[n._v("92")]),a("br"),a("span",{staticClass:"line-number"},[n._v("93")]),a("br"),a("span",{staticClass:"line-number"},[n._v("94")]),a("br"),a("span",{staticClass:"line-number"},[n._v("95")]),a("br"),a("span",{staticClass:"line-number"},[n._v("96")]),a("br"),a("span",{staticClass:"line-number"},[n._v("97")]),a("br"),a("span",{staticClass:"line-number"},[n._v("98")]),a("br"),a("span",{staticClass:"line-number"},[n._v("99")]),a("br"),a("span",{staticClass:"line-number"},[n._v("100")]),a("br"),a("span",{staticClass:"line-number"},[n._v("101")]),a("br"),a("span",{staticClass:"line-number"},[n._v("102")]),a("br"),a("span",{staticClass:"line-number"},[n._v("103")]),a("br"),a("span",{staticClass:"line-number"},[n._v("104")]),a("br"),a("span",{staticClass:"line-number"},[n._v("105")]),a("br"),a("span",{staticClass:"line-number"},[n._v("106")]),a("br"),a("span",{staticClass:"line-number"},[n._v("107")]),a("br"),a("span",{staticClass:"line-number"},[n._v("108")]),a("br"),a("span",{staticClass:"line-number"},[n._v("109")]),a("br"),a("span",{staticClass:"line-number"},[n._v("110")]),a("br"),a("span",{staticClass:"line-number"},[n._v("111")]),a("br"),a("span",{staticClass:"line-number"},[n._v("112")]),a("br"),a("span",{staticClass:"line-number"},[n._v("113")]),a("br"),a("span",{staticClass:"line-number"},[n._v("114")]),a("br"),a("span",{staticClass:"line-number"},[n._v("115")]),a("br"),a("span",{staticClass:"line-number"},[n._v("116")]),a("br"),a("span",{staticClass:"line-number"},[n._v("117")]),a("br"),a("span",{staticClass:"line-number"},[n._v("118")]),a("br"),a("span",{staticClass:"line-number"},[n._v("119")]),a("br"),a("span",{staticClass:"line-number"},[n._v("120")]),a("br"),a("span",{staticClass:"line-number"},[n._v("121")]),a("br"),a("span",{staticClass:"line-number"},[n._v("122")]),a("br"),a("span",{staticClass:"line-number"},[n._v("123")]),a("br"),a("span",{staticClass:"line-number"},[n._v("124")]),a("br"),a("span",{staticClass:"line-number"},[n._v("125")]),a("br"),a("span",{staticClass:"line-number"},[n._v("126")]),a("br"),a("span",{staticClass:"line-number"},[n._v("127")]),a("br"),a("span",{staticClass:"line-number"},[n._v("128")]),a("br"),a("span",{staticClass:"line-number"},[n._v("129")]),a("br"),a("span",{staticClass:"line-number"},[n._v("130")]),a("br"),a("span",{staticClass:"line-number"},[n._v("131")]),a("br"),a("span",{staticClass:"line-number"},[n._v("132")]),a("br"),a("span",{staticClass:"line-number"},[n._v("133")]),a("br"),a("span",{staticClass:"line-number"},[n._v("134")]),a("br"),a("span",{staticClass:"line-number"},[n._v("135")]),a("br"),a("span",{staticClass:"line-number"},[n._v("136")]),a("br"),a("span",{staticClass:"line-number"},[n._v("137")]),a("br"),a("span",{staticClass:"line-number"},[n._v("138")]),a("br"),a("span",{staticClass:"line-number"},[n._v("139")]),a("br"),a("span",{staticClass:"line-number"},[n._v("140")]),a("br"),a("span",{staticClass:"line-number"},[n._v("141")]),a("br"),a("span",{staticClass:"line-number"},[n._v("142")]),a("br"),a("span",{staticClass:"line-number"},[n._v("143")]),a("br"),a("span",{staticClass:"line-number"},[n._v("144")]),a("br"),a("span",{staticClass:"line-number"},[n._v("145")]),a("br"),a("span",{staticClass:"line-number"},[n._v("146")]),a("br"),a("span",{staticClass:"line-number"},[n._v("147")]),a("br"),a("span",{staticClass:"line-number"},[n._v("148")]),a("br"),a("span",{staticClass:"line-number"},[n._v("149")]),a("br"),a("span",{staticClass:"line-number"},[n._v("150")]),a("br"),a("span",{staticClass:"line-number"},[n._v("151")]),a("br"),a("span",{staticClass:"line-number"},[n._v("152")]),a("br"),a("span",{staticClass:"line-number"},[n._v("153")]),a("br"),a("span",{staticClass:"line-number"},[n._v("154")]),a("br"),a("span",{staticClass:"line-number"},[n._v("155")]),a("br"),a("span",{staticClass:"line-number"},[n._v("156")]),a("br"),a("span",{staticClass:"line-number"},[n._v("157")]),a("br"),a("span",{staticClass:"line-number"},[n._v("158")]),a("br"),a("span",{staticClass:"line-number"},[n._v("159")]),a("br"),a("span",{staticClass:"line-number"},[n._v("160")]),a("br"),a("span",{staticClass:"line-number"},[n._v("161")]),a("br"),a("span",{staticClass:"line-number"},[n._v("162")]),a("br")])]),a("h2",{attrs:{id:"接口幂等性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口幂等性"}},[n._v("#")]),n._v(" 接口幂等性")]),n._v(" "),a("ul",[a("li",[n._v("定义")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("以相同的请求（请求参数、请求路径）调用这个接口，一次和多次调用，对系统产生的影响是相同的\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("ul",[a("li",[n._v("接口幂等性和防止重复提交是一回事情吗？")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("幂等： 是指的请求已经发生，或者已经无法避免的情况下，采取一定的技术手段，让这些重复的请求不给系统带来副作用\n\n防止重复： 让用户不发起多次一样的请求，比如在线购物点击了下单按钮，但是由于网络延迟或者其他原因导致响应很慢，此时用户心急多次点击下单按钮，这种情况下可能会造成多次下单（若不做处理）\n         一般防止重复提交方案： 将下单按钮置灰色禁止多次重复点击、跳转到结果页。主要是在客户端解决这个问题\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("ul",[a("li",[n._v("哪些情况无法防止重复提交")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("1. 接口重试调用 ： 因为某些不可逆原因导致调用接口失败，出于容错性考虑会加入失败重试机制，需要重复调用接口。\n2. 消息重复消费 ： 消息队列情况下\n3. 请求重发 ： 网络抖动引发的nginx重发请求，造成重复调用\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("ul",[a("li",[n._v("常见保证幂等性的方式")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("数据库层面：\n    悲观锁： for update\n            1. 当线程A执行 select * from user where id = 1 for update 的时候会对这条记录加锁，当其他线程执行到这行代码的时候，会等待A线程释放锁之后，才能获取锁，继续后续操作\n            2. 事务提交的时候，for update 获取的锁会自动释放\n            缺点： 这种方式比较少使用，因为当业务处理比较耗时的时候，并发情况下，后面的线程会长期出于等待前线程释放锁的状态。web服务中的线程数量都是有限的。若大量的线程由于for upate锁出于等待状态。并发性极低。\n            \n    唯一ID/索引： 主键id、创建唯一约束：\n                                ALTER TABLE user_sys_role ADD CONSTRAINT unique_no UNIQUE(no);\n                                ALTER TABLE user_sys_role DROP INDEX unique_no;\n    乐观锁：  表新建version字段，update携带version字段作为区别标识\n    \n其他：     \n    分布式锁： zookeeper 、 redis \n    token机制\n    \n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br")])]),a("h2",{attrs:{id:"springboot项目中的日期问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springboot项目中的日期问题"}},[n._v("#")]),n._v(" springBoot项目中的日期问题")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("springboot 从数据库中取出来的日期，数据库字段定义的是timestamp，实体中定义的Date。\n1.如果实体中是用String定义这个日期，那么前端接收到的是 ：2020-02-17 08:45:23.0，会发现多个一个 .0\n    解决办法：使用Date定义。并且加上springBoot的日期配置\n\n2.如果定义的Date，但是前端接的是：2020-02-17T08:45:23.000+0000\n    解决方法：在配置文件中加上日期配置参数：\n            spring.jackson.date-format=yyyy-MM-dd HH:mm:  #指定日期输出的格式\n            spring.jackson.time-zone=GMT+8 #解决差八小时的问题\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br")])]),a("p",[n._v("#【Spring-Cloud】")]),n._v(" "),a("p",[n._v("#【SpringMVC】")])])}),[],!1,null,null,null);s.default=t.exports}}]);