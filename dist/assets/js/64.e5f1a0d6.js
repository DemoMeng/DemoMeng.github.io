(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{452:function(s,e,a){"use strict";a.r(e);var n=a(54),t=Object(n.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"mybatis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatis"}},[s._v("#")]),s._v(" Mybatis")]),s._v(" "),a("h2",{attrs:{id:"mybatis的主要执行流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatis的主要执行流程"}},[s._v("#")]),s._v(" Mybatis的主要执行流程")]),s._v(" "),a("p",[a("a",{attrs:{"data-fancybox":"",title:"111",href:"mybatis执行流程.jpg"}},[a("img",{attrs:{src:"mybatis%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.jpg",alt:"mybatis执行流程.jpg"}})])]),s._v(" "),a("h2",{attrs:{id:"mybatis主要组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatis主要组件"}},[s._v("#")]),s._v(" Mybatis主要组件")]),s._v(" "),a("ul",[a("li",[a("h4",{attrs:{id:"sqlsessionfactorybuilder"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sqlsessionfactorybuilder"}},[s._v("#")]),s._v(" SqlSessionFactoryBuilder ：")]),s._v(" "),a("ul",[a("li",[s._v("根据XML配置或是Java配置来生成SqlSessionFactory对象，采用建造者模式")])])]),s._v(" "),a("li",[a("h4",{attrs:{id:"sqlsessionfactory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sqlsessionfactory"}},[s._v("#")]),s._v(" SqlSessionFactory：")]),s._v(" "),a("ul",[a("li",[s._v("用于生成SqlSession，使用SqlSessionFactory.openSession 生成一个SqlSession对象，采用工厂模式")])])]),s._v(" "),a("li",[a("h4",{attrs:{id:"configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[s._v("#")]),s._v(" Configuration：")]),s._v(" "),a("ul",[a("li",[s._v("mybatis所有的配置信息，配置文件中大部分的配置均在这个类中")])])]),s._v(" "),a("li",[a("h4",{attrs:{id:"sqlsession"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sqlsession"}},[s._v("#")]),s._v(" SqlSession：")]),s._v(" "),a("ul",[a("li",[s._v("相当于JDBC的Connection对象，可以用sqlSession直接执行被映射的 Sql 语句，也可以获取对应的 mapper")]),s._v(" "),a("li",[s._v("sqlSession是线程不安全的，所以不能共享，它最佳的作用域为 请求（request）或 当前方法，每个线程都由自己的sqlSession")])])]),s._v(" "),a("li",[a("h4",{attrs:{id:"executor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#executor"}},[s._v("#")]),s._v(" Executor：")]),s._v(" "),a("ul",[a("li",[s._v("MyBatis 中所有的 Mapper 语句的执行都是通过 Executor 执行的，负责SQL语句的生成和查询缓存的维护")])])]),s._v(" "),a("li",[a("h4",{attrs:{id:"statementhandler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#statementhandler"}},[s._v("#")]),s._v(" StatementHandler：")]),s._v(" "),a("ul",[a("li",[s._v("封装了JDBC Statement操作，负责对JDBC statement 的操作，如设置参数、预编译。")])])]),s._v(" "),a("li",[a("h4",{attrs:{id:"parameterhandler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameterhandler"}},[s._v("#")]),s._v(" ParameterHandler：")]),s._v(" "),a("ul",[a("li",[s._v("负责对用户传递的参数转换成JDBC Statement 所对应的数据类型。")])])]),s._v(" "),a("li",[a("h4",{attrs:{id:"resultsethandler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resultsethandler"}},[s._v("#")]),s._v(" ResultSetHandler：")]),s._v(" "),a("ul",[a("li",[s._v("负责将JDBC返回的ResultSet结果集对象转换成List类型的集合。")])])]),s._v(" "),a("li",[a("h4",{attrs:{id:"typehandler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typehandler"}},[s._v("#")]),s._v(" TypeHandler：")]),s._v(" "),a("ul",[a("li",[s._v("负责java数据类型和jdbc数据类型(也可以说是数据表列类型)之间的映射和转换。")])])]),s._v(" "),a("li",[a("h4",{attrs:{id:"mappedstatement"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mappedstatement"}},[s._v("#")]),s._v(" MappedStatement：")]),s._v(" "),a("ul",[a("li",[s._v("负责保存一个映射节点（select｜update ｜ insert ｜delete ）中的内容，主要用途是描述一条sql语句。\nMappedStatement封装了statement对象信息，包括配置的SQL、sql的Id、缓存信息、resultMap、ParameterType、ResultType、ResultMap等配置\nMybatis可以通过MappedStatement获取sql的所有配置信息，其中MappedStatement有一个非常重要的属性SqlSource")])])]),s._v(" "),a("li",[a("h4",{attrs:{id:"sqlsource"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sqlsource"}},[s._v("#")]),s._v(" SqlSource：")]),s._v(" "),a("ul",[a("li",[s._v("负责提供BoundSql对象的，作用就是根据上下文和参数解析生成最终的sql，然后将sql信息封装到BoundSql中。\n我们在Mapper映射文件中定义的SQL，这个SQL可以有占位符和一系列参数的（如select * from t_user where id = #{id}），也可以是动态SQL的形式，\n这里的SqlSource就是用来将它解析为真正的SQL(如：select * from t_user where id = ？)。\n注意：SqlSource是一个接口，而不是一个实现类。对它而言有这么几个重要的实现类：DynamicSQLSource、ProviderSQLSource、RawSQLSource、StaticSQLSource。\n例如前面动态SQL就采用了DynamicSQLSource配合参数解析解析后得到的。它算是起到生成真正SQL语句的一个中转站吧。")])])]),s._v(" "),a("li",[a("h4",{attrs:{id:"boundsql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boundsql"}},[s._v("#")]),s._v(" BoundSql:")]),s._v(" "),a("ul",[a("li",[s._v("是一个结果对象，通过 SqlSource 获取\n作用是通过SqlSource对映射文件的SQL和参数联合解析得到的真正SQL和参数。\n什么意思呢？就是BoundSql包含了真正的SQL语句(由SqlSource生成的，如select * from t_user where id = ？)，\n而且还包含了SQL语句增删改查的参数，而SqlSource是负责将映射文件中定义的SQL生成真正的SQL语句(算是映射文件中的SQL生成真正的SQL语句的中转站)\nBoundSql有3个常用的属性：sql、parameterObject、parameterMappings，这里就不做讨论了，通过名字应该很容易理解它的用处。")])])])]),s._v(" "),a("h2",{attrs:{id:"sqlsessionfactory构建过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sqlsessionfactory构建过程"}},[s._v("#")]),s._v(" sqlSessionFactory构建过程")]),s._v(" "),a("ul",[a("li",[a("h3",{attrs:{id:"mybatis运行分为两大部分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatis运行分为两大部分"}},[s._v("#")]),s._v(" Mybatis运行分为两大部分：")]),s._v(" "),a("ul",[a("li",[a("ol",[a("li",[s._v("sqlSessionFactory的创建过程，它主要通过XMLConfigBuilder将配置文件读取，并且缓存到 Configuration 对象中，然后过通过 Configuration来创建 sqlSessionFactory")])])]),s._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[s._v("sqlSession创建过程，由sqlSessionFactory创建，使用了反射技术、动态代理技术")])])])])]),s._v(" "),a("li",[a("h4",{attrs:{id:"sqlsessionfactory-创建流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sqlsessionfactory-创建流程"}},[s._v("#")]),s._v(" SqlSessionFactory 创建流程")])])]),s._v(" "),a("ul",[a("li",[a("ol",[a("li",[s._v("XMLConfigBuilder 读取 mybatis-config.xml配置文件，并且将读取的配置放到 Configuration中。Configuration是单例模式，几乎所有的Mybatis配置都在 Configuration 中")])])]),s._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[s._v("通过 Configuration 创建 SqlSessionFactory（接口）默认实现类： DefaultSqlSessionFactory，一般由mybatis创建")])])]),s._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[s._v("由 SqlSessionFactory 执行 openSession 开启一个会话，返回一个 SqlSession")])])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 读取mybatis-config.xml 配置文件\nInputStream is = SqlCostTimeInterceptor.class.getClassLoader().getResourceAsStream("mybatis-config.xml");\n// 构建sqlSessionFactory\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);\n// 创建sqlSession\nSqlSession sqlSession = sqlSessionFactory.openSession();\n\n// 获取Mapper\nUserMapper mapper = sqlSession.getMapper(UserMapper.class);\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("ul",[a("li",[s._v("XmlConfigBuilder 读取mybatis配置文件，封装到 Configuration 中，并且返回生成的 SqlSessionFactory")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {\n    try {\n      // XMLConfigBuilder 读取mybatis的配置文件\n      XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);\n      // parser.parse() 将mybatis配置文件封装到 Configuration中\n      // build方法返回SqlSessionFactory\n      return build(parser.parse());\n    } catch (Exception e) {\n      throw ExceptionFactory.wrapException("Error building SqlSession.", e);\n    } finally {\n      ErrorContext.instance().reset();\n      try {\n        inputStream.close();\n      } catch (IOException e) {\n        // Intentionally ignore. Prefer previous error.\n      }\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("ul",[a("li",[s._v("XmlConfigBuilder的parse()方法")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public Configuration parse() {\n    // 每个XmlConfigBuilder只能使用一次，确保 Configuration是单例的 \n    if (parsed) {\n      throw new BuilderException("Each XMLConfigBuilder can only be used once.");\n    }\n    // 创建完Configuration后，就无法再创建了\n    parsed = true;\n    // 遍历mybatis-config.xml配置中configuration节点，读取配置信息\n    parseConfiguration(parser.evalNode("/configuration"));\n    return configuration;\n}\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h2",{attrs:{id:"sqlsession构建过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sqlsession构建过程"}},[s._v("#")]),s._v(" sqlSession构建过程")]),s._v(" "),a("ul",[a("li",[s._v("主要流程：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1. SqlSessionFactory.openSession() 实际上是默认的 DefaulSqlSessionFactory.openSession()\n2. 读取 Configuration 配置对象 （XMLConfigBuilder生成 SqlSessionFactory 的时候初始化了 Configuration）\n3. 创建一个事务工厂 TransactionFactory，并且根据配置的事务隔离级别获取一个事务实例 Transaction\n4. 根据 Configuration 创建一个执行器，默认执行器类型是 Simple\n5. 最终根据上面的参数创建返回默认的 DefaultSqlSession\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("ul",[a("li",[s._v("SqlSessionFactory 中的方法参数：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Boolean autoCommit: 是否自动提交\nConnnection: 数据库连接\nTransactionIsolationLevel： 事务隔离级别\n                              NONE(Connection.TRANSACTION_NONE), 无\n                              READ_COMMITTED(Connection.TRANSACTION_READ_COMMITTED), 读已提交\n                              READ_UNCOMMITTED(Connection.TRANSACTION_READ_UNCOMMITTED), 读未提交\n                              REPEATABLE_READ(Connection.TRANSACTION_REPEATABLE_READ), 可重复读\n                              SERIALIZABLE(Connection.TRANSACTION_SERIALIZABLE); 可串行化\nExecutorType： 执行器类型\n               SIMPLE,  默认执行器类\n               REUSE,   能过执行重用预处理语句的执行器\n               BATCH    执行器重用语句和批量更新，批量专用的执行\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("ul",[a("li",[s._v("DefaultSqlSessionFactory.openSession(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) 创建一个sqlSession源码")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {\n    Transaction tx = null;\n    try {\n      // 读取 XmlConfigBuilder 中设置 Configuration 的全局配置\n      final Environment environment = configuration.getEnvironment();\n      // 获取一个事务工厂对象\n      final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);\n      // 根据事务工厂，创建一个事务对象实例\n      tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);\n      // 通过Configuration 生成 Executor 执行器\n      final Executor executor = configuration.newExecutor(tx, execType);\n      // 返回sqlSession 默认的 DefaultSqlSession\n      return new DefaultSqlSession(configuration, executor, autoCommit);\n    } catch (Exception e) {\n      closeTransaction(tx); // may have fetched a connection so lets call close()\n      throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);\n    } finally {\n      ErrorContext.instance().reset();\n    }\n}\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("h2",{attrs:{id:"sqlsession四大对象-executor、parameterhandler、statementhandler、resultsethandler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sqlsession四大对象-executor、parameterhandler、statementhandler、resultsethandler"}},[s._v("#")]),s._v(" sqlSession四大对象：Executor、ParameterHandler、StatementHandler、ResultSetHandler")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("Executor：")]),s._v(" "),a("ul",[a("li",[s._v("执行器，由它来调度 ParameterHandler、StatementHandler、ResultSetHandler 执行SQL，其中，StatementHandler是最重要的")])])]),s._v(" "),a("li",[a("p",[s._v("ParameterHandler：")]),s._v(" "),a("ul",[a("li",[s._v("处理SQL参数转换成jdbc对象")])])]),s._v(" "),a("li",[a("p",[s._v("StatementHandler：")]),s._v(" "),a("ul",[a("li",[s._v("使用数据库的 statement、prepareStatement 来执行操作，StatementHandler是四大对象的核心，许多重要的插件都是通过拦截 StatementHandler实现的")])])]),s._v(" "),a("li",[a("p",[s._v("ResultSetHandler：")]),s._v(" "),a("ul",[a("li",[s._v("进行数据结果集封装处理返回的")])])])])])}),[],!1,null,null,null);e.default=t.exports}}]);