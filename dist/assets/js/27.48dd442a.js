(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{417:function(a,s,t){"use strict";t.r(s);var e=t(54),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"hashset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashset"}},[a._v("#")]),a._v(" HashSet")]),a._v(" "),t("ol",[t("li",[a._v("底层使用Hash表、内部是HashMap")]),a._v(" "),t("li",[a._v("无需排列，不可以重复")]),a._v(" "),t("li",[a._v("存储速度快")]),a._v(" "),t("li",[a._v("线程不安全")])]),a._v(" "),t("h2",{attrs:{id:"构造方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造方法"}},[a._v("#")]),a._v(" 构造方法")]),a._v(" "),t("p",[a._v("// 看一下构造方法 ，发现还是用的hashMap，默认的就是16容量，0.75扩容系数")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// Constructs a new, empty set; the backing <tt>HashMap</tt> instance has\n// default initial capacity (16) and load factor (0.75).\n// 和hashMap一样，默认的就是16容量，0.75扩容系数\npublic HashSet() {\n   map = new HashMap<>();\n}\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("h2",{attrs:{id:"底层使用的-hashmap-但是为什么add只是需要传一个值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#底层使用的-hashmap-但是为什么add只是需要传一个值"}},[a._v("#")]),a._v(" 底层使用的 hashMap,但是为什么add只是需要传一个值")]),a._v(" "),t("p",[a._v("// hashSet的add方法调用hashMap时候，将key作为了hashSet的元素传入，value则传入了一个new Object对象，所以hashSet只是关心key值，value不关心")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("private static final Object PRESENT = new Object();\npublic boolean add(E e) {\n   return map.put(e, PRESENT)==null;\n}\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("h2",{attrs:{id:"如何保证线程安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何保证线程安全"}},[a._v("#")]),a._v(" 如何保证线程安全？")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("1. 使用 Set<String> strings = Collections.synchronizedSet(new HashSet<String>());\n2. 使用 CopyOnWriteArraySet set = new CopyOnWriteArraySet(); ，这个底层还是调用的 CopyOnWriteArrayList, 源代码如下：\n\nprivate final CopyOnWriteArrayList<E> al;\n/**\n* Creates an empty set.\n*/\npublic CopyOnWriteArraySet() {\n   al = new CopyOnWriteArrayList<E>();\n}")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])])])}),[],!1,null,null,null);s.default=n.exports}}]);